within Cardiovascular.Model;
package Avolio1980
  extends Modelica.Icons.ExamplesPackage;
      package Parts
        extends Modelica.Icons.UtilitiesPackage;
        model ArterialSegment
          parameter Physiolibrary.Types.Height L "length";//L=0.094,R=0.002,h=0.0005,E=4000.0)
          parameter Physiolibrary.Types.Height R "radius";
          parameter Physiolibrary.Types.Height h=0.0005 "wall thickness";
          parameter Physiolibrary.Types.Pressure E=1600000.0
            "Young modulus N/m^2";
      parameter Modelica.Units.SI.Density ro=1060;
      parameter Modelica.Units.SI.DynamicViscosity mi=0.004;
          parameter Boolean terminal = false;
          parameter Physiolibrary.Types.HydraulicResistance Rbref=1e8; //per KK
          parameter Real kkCfactor = 3.53;
          parameter Real kkLfactor =  8 * (0.2057 - 0.0392);
          parameter Real myfactor = 1;
        //  Physiolibrary.Types.Conductance Z0;
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
              Placement(transformation(extent={{-110,-10},{-90,10}}),
                iconTransformation(extent={{-120,-20},{-80,20}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation (
              Placement(transformation(extent={{90,-10},{110,10}}), iconTransformation(
                  extent={{80,-20},{120,20}})));
          ElasticVesselNP                                  elastance(final Compliance=kkCfactor*Modelica.Constants.pi*R^3*L/(E*h),
            volume_start=R^2*L*Modelica.Constants.pi,
            ZeroPressureVolume=R^2*L*Modelica.Constants.pi)
            annotation (Placement(transformation(extent={{-14,-22},{30,22}})));
          Physiolibrary.Hydraulic.Components.Resistor resistance(final Resistance=8*mi*L/(Modelica.Constants.pi*R^4))
            annotation (Placement(transformation(extent={{-58,-22},{-14,22}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(final I=(kkLfactor*ro*L)/(myfactor*Modelica.Constants.pi*R^2),
            Simulation=Physiolibrary.Types.SimulationType.NoInit,
            volumeFlow_start(displayUnit="l/min") = 0)
            annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));

          Physiolibrary.Hydraulic.Components.Conductor terminalresistance(final
              Conductance=if terminal then R/(Rbref*h) else 1/Modelica.Constants.eps)
            annotation (Placement(transformation(extent={{42,-22},{86,22}})));
        equation
          connect(elastance.q_in, terminalresistance.q_in) annotation (Line(
              points={{8,0},{34,0},{34,4.44089e-16},{42,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(port_b, terminalresistance.q_out) annotation (Line(
              points={{100,0},{94,0},{94,4.44089e-16},{86,4.44089e-16}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(port_a, inertia.q_in) annotation (Line(
              points={{-100,0},{-90,0}},
              color={0,0,0},
              thickness=1));
          connect(inertia.q_out, resistance.q_in) annotation (Line(
              points={{-70,0},{-58,0}},
              color={0,0,0},
              thickness=1));
          connect(elastance.q_in, resistance.q_out) annotation (Line(
              points={{8,0},{-14,0}},
              color={0,0,0},
              thickness=1));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={Bitmap(
                  extent={{-80,42},{28,-42}},
                  imageSource=""
                       + "llqWv1EWQqtPRFNtPFmAukVu3zS9ZgaWztDwTi0RntmchuflYbB8547vo69DP+gERtpvRr97puh8aTn+Tk34zZG56Mxw2v3gPDUGNvaCIebd3oT1Hkdg8fIWHqZ54mVBGN7WpymQlbUypLeQgdtSycDpbNMM1jqBSUMIwque4eYbO/wUcQVLHHdSXy5HVzL7N8emKOt4dAq6Hp6CsZeWqXG10yHn4ZnuiHhKlbz6WNQwKShviEUlmUwWvm2gcG9lZt8ui5jQZNtUKXcuNCtfy/KTjdR3MuyhRuOrotQ67yLeBVgi4MWUeBe2EtaSIQZrmsOWubhsPBYtwljUSO21mhcRCaDk3XxVNPm7TsIiLybvuSstJFuRFisFVAxK6aTPVxR4tz+6YmfUJSzz2YNhlqvoWdPRZe8k9GHoGHFgJiYwjJjfWov9rrtxP9oSL4v8kdWepLSQjFrXtL3ltRjSGM5K2rOVXgml4LbJ88G+uNswJQAnWW7ACDKBzoll+Jbn+/s+Mt7hGeh7ej6GX1yMlc5bsPXJLpyPPA+PbFvEV/hQoDNdJ5DqKbhl7faKlihU0SRUy/1AWTpc6tNUT6uLVNpDa60Ux19+bmbIaGS9Zb30KmqV4vY4AjOOII2jS8Uhrj0cwXXP4fbJGbcTb+LE82PYyix1+dmlmHCA4WzPAnTdT8F+cBn+fmAJvj68DDoXTDHJbhdWPDmJvQm2sPpI9mxIxLt2tkPzG9SqhWxTqXsJ9DYZmkjHx7ZExDCSOL93xdHwCzD0/BHTbczR7QQZ+sRMdDo2HR0PTkHvI7Mx4YoBjNx240DAafi/c0Fy7hOSRizaJEOuYqgrJSNVUuLQ2uuimZxFqERLiEMkkLxYQJMtkkX3rYI1I52EQgGVhENhLaWxBFiOa6YrxrKRNUhXjUBLqjtjKEUdhbakqRVMT0uZUUj6Kn8LNVaTseRVJyXMJuSlQCklz2Ebewffu+/FIusN6HlqPv5yag7+x/Hp+B/HpuFbiu9JlibY7H0IN+Ot4Z39CBmM1dmM4QXMlkqpNWoaE0i1sagqi0RZsbw2JAEvUz1w1fcctjv9jFmWq9GF5/ofh8bj30/NxFcMZV2OLkO/M/qYfGsjjDwO4nDUTVizgX1L/Qhzhk9Ju5l+C5CUJmTmKguN1ZX7ofVzJtReSp34eSv39VrL2JAUsM0MB5ItyevyRMzWk8XVixKoS2TxWElKahnK/tFClFyoosk66a0Mc7W8fjm1U0E7mZF6NJVsE1bihzspTjgWfg+mHifYNpvQw0JXrd3+70cZSo8txldMHPocWYGJRw2w+vxmWD66hsxsdniNrL31Bo2F1LpMpFob4lg3zTr3BdxmUBLI0t73GD6PJdzG6sd7Mf66EXocnoNv90xXTth3P5176xjsPK+Px5GW+FhJgU7wVBNIzWQycapGmryRTS2U+zlzVKMCMhRREwffAwa/MJY2M1QaS4YYRLzLqLu96VR1z/CywSjUxzowDFK4V75UA2zy5id5J5+EQflb0WJtGBHOEEkPL2ZFnrAS008twt82D0bHvRPpLXMw6sZqrPTYg+OJd+HGjDGiNZ5+kaayv0+sfj6PK2KHF7fI2qK8Bj2jti5KvdlCXiGS3haJ3V670WvnUPx5Sz98c3A0OjO0Dbi+GIucNuP0iyuwi7RF8Ht/vGGIKqc+qSfbNbZmkGmTmDSQgShIRRdIh4twraxjA8owCEGg1kpQSyhRc5RyK5mUvJaYIVYeyW8XEVxNQFbL0pQxbOQ41NSTmetky3JSu8ibHWT0X90IpyRQM1XVeB8ZPT8QDXnyrkI6KLOyOoYdWSS3kswmr3VrIvCryXS5PDalLBABuY9xP9Ea+31Owpz6ct6lNZh8YhWGbJuF0TvmYY/9CaU1i5n+5LdkooTtJY5fJ05OHdbGa7eLTqK2bWE92htfs4wEG0NrKjWbX14QrkTbYL3zISy+YoZxO0Zj200jeKffJ9NGss3jUElHr2HZ5FUvYjIu1kBGl1tKMmyhhhpkpi6TO1myXauxtJnhL+NYj9bNgbzSX6ZjOKkljaYRT/c1WSFRKgNpsqyz3E4Qk78lzkq8lcHM6vZYFigFUVUBMLllBt3b5tj/4izuZJM1KIAjCSZ5B04x/y8loIqamRHSIwoJyHwK7aJ6siHTWWFBuZ1RIwBjJlrcHsMjonAh+ASWX1kGE/v1sEi8hDv59nBt8OUvPJ5sUEOma6AGaiGQ5H1/at66eiyeAJH5RrKGadnntc6r6YES7lpJ/TKJUKaHSJIhpl5HTON36g2x7CQ5RrKlegJGZbYEQNUXpl6EQKtnQzdRd8gxaskjuaas1SBz55m8KJCyTC3UaaLXRLc1EGTq3milvAE2GM3yIk12bAWdTZbeTmWHhjJhkjdiXKUDnfU7A/cMR4bYJPWygQxhzPYoZm6f51+J9pHH+0t4ziICQL0wlNcuZVZYlYpm6sAanjlP7i80JiGUQLdPtoJfjj0yW15qMnVmfPnMFuW9hUW8dim3si68DDMIA4tzypqv6m24JSHwPfxrVigZoQDLXUbe5e31TzbMh7PRlF9eLWe/aTaqgu8yFLJADAdyd10tIktKFJO/5Q53C0FVQ41S0BiiRs1llbu0bG8U0GNqmtKI+nS0k5caWZGqukSUsuMqCl6gXlYBlts/smzP5xvN8gLwFnqFvN63hgwgN5PlHYPSWSW5/iigzqhmFlJHAJewAeRmbimtCEydW/xRUueH0ipfVDILkjeJat4Hw3PLdWQtBmaPLSUUqMVkDDJUTTE1EcsjbyVtafD/B2v6whrrqR9/x2SCXUN9JFmI2dtnayCwG+oI9M9WX5NIVmcyU0HnqyAbVJKtPlt1JdN4tq8soS1vMxWJUdbwkuwdisK2lwQA24BAK8QLfGp8Sif0QmWLDxrbac1ePPcj1Jc9QWOJL5qYncv7ueWuhoxXiQ6S19u1kWUb2B/lxTxnUQgKGOpLybqVrakqEZDVC+X9h6V0UnlfkICpQkBOdmpmv8i9Wbl1VEmwlVJayAiBeom7TE9iRum9X1cxloBKCyy5zdPBSW8C/DYuxCPTmeoNYNarxsFmzVTke11ix9Pb1K2cENVR6hVj3Kr7fBRvspX3A5dX+aGyzB/qprLM06lP5TEEZWEUWovoUSXMMOSN9/J2ClkLUybWySRAuRco02JkRmZpkHrfn/btqjL9RWWciknE+wkO9eb8WDZeJCpLXqGkOACVBFNdgx/a2kTPcF/SucxIlZd01+bLwxbCCPxOJt5Vy1wiWSGQ5atNZ3nJcrXyTmVfZnz/0VrquK31Udb62dpqNNZeTSNDt6uxH9aRIbeZwJfXvYlJ2BSTFZC11kDt2Ew2lbGlNgJOvU21NJif6Wgyqk0dJvdV5Z2QZdSAJZU+KK/2pV57irYm1qUtgHXzphZ0ZHvYsw7emnuE6i32rKPc0SADSsIlYVEWiKssZSgWIpApOW2sP7WwvLC9rjSEvwWrWz9llDriyNLuMhCuwrmwKQmlVebaM4K00VrknqTc4Ob5W4rowGkucP9xER7oj/1lqEHApRjLVW8i/DYsgKfxdLga8geC6z6pTd4wURZC1hJqVcMJ7DSJqyrNpFWyEiLiyGAg06hbNSyomhAma42W8HdJyWXJHrn3JIuHyUxSufsub1WvlPWs2FiylhU7QA3KCZDUWpliIg55XDsBQFC05fM68k5pGVGulQViabIUkbCRhC9hwUJev1gcgZ9lBoXMEJX5WmJsaDVLUlZ0VncH6AgCaplCLYOCWpMyaE0+S2j7QjOp0PmLsUxqujLPKSZ10xrlgzJ2rho4FlNl4DGKTbmV36hXUStlDlQPgrRLmaSdmP2CrKJe6yvpP4Wyuo9HxlFP/sj8OHEaef0vszM1KC19JX0jZZc60znVnC46rFrRWkyVi8cI2NQ9Qra1VozLrFoVxqVuPIe0J7WhCrECXnkWgZmzlFueO8h+clYt3X5Pd9QvN6ElJLrJctxupnPgvWExHPRlgtZ0eK2frVT+HYPRcP1xCbxOrIbbSRM4nTaDwxkztXU5ZcLvzPCIv3kwTX520hDeJwzwYNd8BFluh/NJYzw8YgDnU2vgelrMFB5nTOB+2ggep/XhdnoFv1sG11PL4XJEF+7MeB4dM4a3hRmenFwDbx4nb7NwO2MOh5OmeMjvnU+vg+eFzfA8uREu+03gudsYvgfX4enhdXhydD0eH1+Hxxbr4WGxjmVbAycLEzhYGMHplJiURZ/X04P7KV08OqmLxydX0vThZWGKRxbmtHVqK8d7nPx1635iLdwt1sCTW88TLNfxtTTN1uu4CZ6e0IevxQr4nliJp9w+tZDtStZDY17M8h6f1GOdVqntoxN68DyuC49jK+FOc+FxUi6P04ZqsX/vU6bqvJ6H2O77DVm3tfA/tRk+JzbBfb8p3A6awefMVjyluR4xhffJdfA6ybJImVlvdx4v7e161kwtQenM8zqz/q6sqyvL4mHB67MMXhar1IMh8hyByyF9PDlhCj+e48khI6WbnrMt5JVxvqfMWG4T1U/2h5bDg8d4sy/t9i7GdeMxsDebhPvLR6hBUSfzGbAxngrH9XPQwXvvOliZzCZLTSPSZsNZECcvMzSbDOuVw3Fff4yaY37LcIJaElu2dwzHwcpwDO4SfFqTz3c+m0yd/Y8m3/N3o9Hc0laPVFvtMXINrcn5xeQ4me8t02/FNNeewH0m4K7cMP9s8llMfhP7retqjNf7bFaGGtNeS3Ps/95WlZfnuGs48nMbjPzlvP9/TFuWL9vhn9tCW7cvTVMGrUlZfrXfr7um7f+x/rwW7S6vI3ZfX2MyLqX5W37TmHbfX48ZA2v90fAisOxWjFCLrblsWoiLy8bA42cTdAi9cRy2Owxwz3w+3Lcugrwd05UHPjaZCC/jCfCQe4nG0+AiL5M2maG28nCiuzG/5z7yt3apwP+2/3qmXXfhj5hgQHDiYjCWoXCWWjLzivFchFw9hA54HYGAC3txcdUUXFkxRoVBYSxPkwl4RPby5AkkRLqazIQLBb5sZeqpPCbmZqqZhiqvEftv+69p2gcg/qgJDmSVolurJuL8yim4vX01Pga6Elh1hdSCj+B2YD1uMyRKjHTjBT1MJikkujL8yVCEE0OlvC9axrtk8ryr0USGzfH8/Os7VP7b/uuZ9OUfNbVWg8k02K+hlFq7CLY/miHc9joFfxaB1VBGlZ/PBCoICVYW8P5xlRqJF3A9MtM8IyazTN3kaWkz+X6G+s7TdLIy2U873/m/7b+eafr3j5lgwY7Actu+EgFnfmKW6MDs9APQVIX/D5GUh/p4kkq9AAAAAElFTkSuQmCC",
                  fileName="modelica://Physiolibrary/Resources/Icons/resistance.png"),
                  Bitmap(
                  extent={{28,40},{86,-36}},
                  imageSource="",
                  fileName="modelica://Physiolibrary/Resources/Icons/elastickyKompartment.png")}),
                                              Diagram(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
        end ArterialSegment;

        model ElasticVesselNP
          "Elastic container for blood vessels, bladder, lumens without collapse"
         extends Physiolibrary.Icons.ElasticBalloon;
         extends Physiolibrary.SteadyStates.Interfaces.SteadyState(state_start=
                volume_start, storeUnit="ml");
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a q_in
            annotation (Placement(transformation(extent={{-14,-14},{14,14}})));
          parameter Physiolibrary.Types.Volume volume_start=1e-11
            "Volume start value"
            annotation (Dialog(group="Initialization"));                                 //default = 1e-5 ml
          Physiolibrary.Types.Volume excessVolume
            "Additional volume, that generate pressure";

           parameter Boolean useV0Input = false
            "=true, if zero-pressure-volume input is used"
            annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

           parameter Physiolibrary.Types.Volume ZeroPressureVolume=1e-11
            "Maximal volume, that does not generate pressure if useV0Input=false"
            annotation (Dialog(enable=not useV0Input)); //default = 1e-5 ml

            parameter Physiolibrary.Types.Volume CollapsingPressureVolume=1e-12
            "Maximal volume, which generate negative collapsing pressure"; //default = 1e-6 ml

           Physiolibrary.Types.RealIO.VolumeInput zeroPressureVolume(start=
                ZeroPressureVolume)=zpv if useV0Input annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={-80,80})));
          parameter Boolean useComplianceInput = false
            "=true, if compliance input is used"
            annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.HydraulicCompliance Compliance=1
            "Compliance if useComplianceInput=false"
            annotation (Dialog(enable=not useComplianceInput));

          Physiolibrary.Types.RealIO.HydraulicComplianceInput compliance(start=
                Compliance)=c if useComplianceInput annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={0,80})));
          parameter Boolean useExternalPressureInput = false
            "=true, if external pressure input is used"
            annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
          parameter Physiolibrary.Types.Pressure ExternalPressure=0
            "External pressure. Set zero if internal pressure is relative to external. Valid only if useExternalPressureInput=false."
            annotation (Dialog(enable=not useExternalPressureInput));
          parameter Physiolibrary.Types.Pressure MinimalCollapsingPressure=-10132500;
          Physiolibrary.Types.RealIO.PressureInput externalPressure(start=
                ExternalPressure)=ep if useExternalPressureInput annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={80,80})));

          Physiolibrary.Types.RealIO.VolumeOutput volume annotation (Placement(
                transformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={0,-100}), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={60,-100})));

    protected
          Physiolibrary.Types.Volume zpv;
          Physiolibrary.Types.HydraulicCompliance c;
          Physiolibrary.Types.Pressure ep;
          parameter Physiolibrary.Types.Pressure a=MinimalCollapsingPressure/log(
              Modelica.Constants.eps);

        equation
          if not useV0Input then
            zpv=ZeroPressureVolume;
          end if;
          if not useComplianceInput then
            c=Compliance;
          end if;
          if not useExternalPressureInput then
            ep=ExternalPressure;
          end if;
          excessVolume = max( 0, volume - zpv);
          q_in.pressure = if volume>=0 then (excessVolume/c + ep)
         else
             log(volume+1)+ep;

        /*  smooth(0,
    if noEvent(volume>CollapsingPressureVolume) then 
      (excessVolume/c + ep)
    else 
      (a*log(max(Modelica.Constants.eps,volume/CollapsingPressureVolume)) + ep));
      */
                //then: normal physiological state
          //else: abnormal collapsing state

          //Collapsing state: the max function prevents the zero or negative input to logarithm, the logarithm brings more negative pressure for smaller volume
          //However this collapsing is limited with numerical precission, which is reached relatively soon.

          state = volume; // der(volume) =  q_in.q;
          change = q_in.q;
         // assert(volume>=-Modelica.Constants.eps,"Collapsing of vessels are not supported!");
         annotation (
            Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                    100,100}}), graphics={Text(
                  extent={{-318,-140},{160,-100}},
                  textString="%name",
                  lineColor={0,0,255})}),        Documentation(revisions="<html>
<p><i>2009-2014 - </i>Marek Matejak, Charles University, Prague, Czech Republic</p>
<ul>
<li>initial implementation </li>
</ul>
<p>4.5.2015 - Tom&aacute;&scaron; Kulh&aacute;nek, Charles University, Prague, Czech Republic</p>
<ul>
<li>fix of external pressure</li>
</ul>
</html>",     info="<html>
<p>Pressure can be generated by an elastic tissue surrounding some accumulated volume. Typically there is a threshold volume, below which the relative pressure is equal to external pressure and the wall of the blood vessels is not stressed. But if the volume rises above this value, the pressure increases proportionally. The slope in this pressure-volume characteristic is called &ldquo;Compliance&rdquo;.</p>
<ul>
<li>Increassing volume above ZeroPressureVolume (V0) generate positive pressure (greater than external pressure) lineary dependent on excess volume.</li>
<li>Decreasing volume below CollapsingPressureVolume (V00) generate negative pressure (lower than external pressure) logarithmicaly dependent on volume.</li>
<li>Otherwise external pressure is presented as pressure inside ElasticVessel.</li>
</ul>
<p><br><img src=\"modelica://Physiolibrary/Resources/Images/UserGuide/ElasticVessel_PV.png\"/></p>
</html>"));
        end ElasticVesselNP;

        model ArterialSegmentB
          extends ArterialSegment(terminal=true);
        end ArterialSegmentB;

        model ArterialSegmentT
          extends ArterialSegment(terminal=true);
        end ArterialSegmentT;
      end Parts;

      model ArterialTree

        Parts.ArterialSegment a1 "ascending aorta" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-18,0})));
        Parts.ArterialSegment a2 "aortic arch"
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-18,26})));
        Parts.ArterialSegmentB a3 "subclavian artery left"
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={18,36})));
        Parts.ArterialSegmentB a4 "common carotid left"
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={2,58})));

        Parts.ArterialSegmentB a5 "aortic arch"
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={2,24})));
        Parts.ArterialSegmentB a6 "brachiocephalic artery"
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-40,36})));
        Parts.ArterialSegmentB a7 "internal mammary left"
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={46,50})));
        Parts.ArterialSegmentB a8 "subclavian artery left"
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={48,36})));
        Parts.ArterialSegmentT a9 "vertebral artery"
                                 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={26,4})));
        Parts.ArterialSegment a10 "common carotid left" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={10,84})));
        Parts.ArterialSegment a11 "thoracic aorta" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={2,-6})));
        Parts.ArterialSegment a12 "common carotid right" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,64})));
        Parts.ArterialSegmentT a13 "vertebral artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-68,62})));
        Parts.ArterialSegmentT a14 "subclavian artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-80,40})));
        Parts.ArterialSegmentT a15 "internal mamymary artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-54,10})));
        Parts.ArterialSegmentT a16 "costo cervical artery left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={78,10})));
        Parts.ArterialSegment a17 "axilliary artery left" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={86,36})));
        Parts.ArterialSegmentT a18 "suprascapular left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={70,8})));
        Parts.ArterialSegmentT a19 "thyrocervical left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={54,8})));
        Parts.ArterialSegment a20 "common carotid left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={10,114})));
        Parts.ArterialSegment a21 "thoracic aorta" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={2,-34})));
        Parts.ArterialSegment a22 "common carotid right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,94})));
        Parts.ArterialSegmentT a23 "thyrocervical right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-94,16})));
        Parts.ArterialSegmentT a24 "suprascapular right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-100,12})));
        Parts.ArterialSegment a25 "axiliary artery right" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-120,40})));
        Parts.ArterialSegmentT a26 "costo-cervical artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-114,12})));
        Parts.ArterialSegmentT a27 "thoraco-acromial left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={124,36})));
        Parts.ArterialSegment a28 "axillary artery left" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={126,18})));
        Parts.ArterialSegmentT a29 "circumflex scapular left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={120,-2})));
        Parts.ArterialSegmentT a30 "subscapular left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={106,-2})));
        Parts.ArterialSegment a31 "carotid internal left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={10,142})));
        Parts.ArterialSegment a32 "external carotid left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={36,132})));
        Parts.ArterialSegmentT a33 "superior thyroid artery left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={46,124})));
        Parts.ArterialSegment a34 "thoracic aorta" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={2,-60})));
        Parts.ArterialSegmentT a35 "superior thyroid artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-70,104})));
        Parts.ArterialSegment a36 "external carotid right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-76,118})));
        Parts.ArterialSegment a37 "carotid internal right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,130})));
        Parts.ArterialSegmentT a38 "subscapular right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-140,14})));
        Parts.ArterialSegmentT a39 "circumflex scapular right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-128,12})));
        Parts.ArterialSegment a40 "axillary artery right" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-158,24})));
        Parts.ArterialSegmentT a41 "thoraco-acromial right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-172,40})));
        Parts.ArterialSegment a42 "brachial artery left" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={156,6})));
        Parts.ArterialSegmentT a43 "lingual arery left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-4,160})));
        Parts.ArterialSegment a44 "internal carotid left" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,178})));
        Parts.ArterialSegmentT a45 "facial artery left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-6,148})));
        Parts.ArterialSegmentT a46 "middle cerebral left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={46,158})));
        Parts.ArterialSegmentT a47 "cerebral artery left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={58,158})));
        Parts.ArterialSegmentT a48 "opthalmic artery left"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={76,150})));
        Parts.ArterialSegment a49 "coeliac artery" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={24,-70})));
        Parts.ArterialSegment a50 "abdominal aorta" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,-88})));
        Parts.ArterialSegmentT a51 "opthalmic artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-108,118})));
        Parts.ArterialSegmentT a52 "cerebral artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-110,152})));
        Parts.ArterialSegmentT a53 "middle cerebral right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-92,152})));
        Parts.ArterialSegmentB a54 "facial artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-32,132})));
        Parts.ArterialSegment a55 "internal carotid right" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,174})));
        Parts.ArterialSegmentB a56 "lingual artery right"
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-34,156})));
        Parts.ArterialSegmentB a57 "brachial artery right" annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-162,-8})));
        Parts.ArterialSegment a58(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={138,-18})));
        Parts.ArterialSegment a59 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={156,-22})));
        Parts.ArterialSegment a60(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,208})));
        Parts.ArterialSegment a61(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={60,-70})));
        Parts.ArterialSegment a62(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={60,-56})));
        Parts.ArterialSegment a63(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={58,-82})));
        Parts.ArterialSegment a64(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={26,-98})));
        Parts.ArterialSegment a65 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,-118})));
        Parts.ArterialSegment a66(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-8,-112})));
        Parts.ArterialSegment a67(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-26,-98})));
        Parts.ArterialSegment a68(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,202})));
        Parts.ArterialSegment a69 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-162,-36})));
        Parts.ArterialSegment a70(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-146,-18})));
        Parts.ArterialSegment a71 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={156,-52})));
        Parts.ArterialSegment a72(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={174,-44})));
        Parts.ArterialSegment a73(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,238})));
        Parts.ArterialSegment a74(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={20,238})));
        Parts.ArterialSegment a75 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,-144})));
        Parts.ArterialSegment a76(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-60,236})));
        Parts.ArterialSegment a77(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-44,236})));
        Parts.ArterialSegment a78(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-184,-46})));
        Parts.ArterialSegment a79 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-162,-66})));
        Parts.ArterialSegment a80(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={128,-62})));
        Parts.ArterialSegment a81 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-80})));
        Parts.ArterialSegment a82 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={24,-154})));
        Parts.ArterialSegment a83(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={4,-170})));
        Parts.ArterialSegment a84 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-14,-154})));
        Parts.ArterialSegment a85 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-162,-96})));
        Parts.ArterialSegment a86(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-132,-76})));
        Parts.ArterialSegment a87 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-110})));
        Parts.ArterialSegment a88 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={174,-90})));
        Parts.ArterialSegment a89 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={52,-154})));
        Parts.ArterialSegment a90(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={34,-172})));
        Parts.ArterialSegment a91(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-24,-172})));
        Parts.ArterialSegment a92 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-42,-154})));
        Parts.ArterialSegment a93 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-174,-116})));
        Parts.ArterialSegment a94 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-160,-124})));
        Parts.ArterialSegment a95 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-138})));
        Parts.ArterialSegment a96(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={136,-130})));
        Parts.ArterialSegment a97(terminal=true)
                                  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={194,-100})));
        Parts.ArterialSegment a98 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={84,-154})));
        Parts.ArterialSegment a99 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-68,-154})));
        Parts.ArterialSegment a100(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-182,-136})));
        Parts.ArterialSegment a101(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-144,-144})));
        Parts.ArterialSegment a102 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-160,-154})));
        Parts.ArterialSegment a103(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={158,-170})));
        Parts.ArterialSegment a104 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-166})));
        Parts.ArterialSegment a105(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={94,-174})));
        Parts.ArterialSegment a106(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-84,-164})));
        Parts.ArterialSegment a107 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-98,-164})));
        Parts.ArterialSegment a108(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-160,-180})));
        Parts.ArterialSegment a109 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-196})));
        Parts.ArterialSegment a110 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-98,-190})));
        Parts.ArterialSegment a111 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-226})));
        Parts.ArterialSegment a112 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-98,-216})));
        Parts.ArterialSegment a113 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-256})));
        Parts.ArterialSegment a114 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-96,-242})));
        Parts.ArterialSegment a115 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={112,-284})));
        Parts.ArterialSegment a116 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={88,-266})));
        Parts.ArterialSegment a117 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-76,-252})));
        Parts.ArterialSegment a118 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-96,-270})));
        Parts.ArterialSegment a119 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={132,-294})));
        Parts.ArterialSegment a120 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={90,-294})));
        Parts.ArterialSegment a121(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={58,-278})));
        Parts.ArterialSegment a122(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-52,-266})));
        Parts.ArterialSegment a123 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-72,-292})));
        Parts.ArterialSegment a124 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-116,-292})));
        Parts.ArterialSegment a125(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={160,-304})));
        Parts.ArterialSegment a126(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={72,-304})));
        Parts.ArterialSegment a127(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-62,-314})));
        Parts.ArterialSegment a128(terminal=true)
                                   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-126,-314})));
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
            Placement(transformation(extent={{-28,-44},{-8,-24}}),
              iconTransformation(extent={{-310,-10},{-290,10}})));
        Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation (
            Placement(transformation(extent={{290,-10},{310,10}}),
              iconTransformation(extent={{290,-10},{310,10}})));
      equation
        connect(a2.port_b, a3.port_a) annotation (Line(
            points={{-18,36},{8,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a4.port_a, a3.port_a) annotation (Line(
            points={{2,48},{2,36},{8,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a5.port_a, a3.port_a) annotation (Line(
            points={{2,34},{2,36},{8,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a6.port_a, a2.port_b) annotation (Line(
            points={{-30,36},{-18,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a3.port_b, a7.port_a) annotation (Line(
            points={{28,36},{28,43},{36,43},{36,50}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a3.port_b, a9.port_a) annotation (Line(
            points={{28,36},{28,14},{26,14}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a4.port_b, a10.port_a) annotation (Line(
            points={{2,68},{4,68},{4,74},{10,74}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a5.port_b, a11.port_a) annotation (Line(
            points={{2,14},{2,4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a14.port_a, a6.port_b) annotation (Line(
            points={{-70,40},{-60,40},{-60,36},{-50,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a6.port_b, a15.port_a) annotation (Line(
            points={{-50,36},{-50,20},{-54,20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a3.port_b, a8.port_a) annotation (Line(
            points={{28,36},{38,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a8.port_b, a16.port_a) annotation (Line(
            points={{58,36},{74,36},{74,20},{78,20}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a8.port_b, a17.port_a) annotation (Line(
            points={{58,36},{76,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a18.port_a, a8.port_b) annotation (Line(
            points={{70,18},{70,36},{58,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a19.port_a, a8.port_b) annotation (Line(
            points={{54,18},{60,18},{60,36},{58,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a12.port_a, a6.port_b) annotation (Line(
            points={{-50,54},{-50,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a10.port_b, a20.port_a) annotation (Line(
            points={{10,94},{10,104}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a11.port_b, a21.port_a) annotation (Line(
            points={{2,-16},{2,-24}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a12.port_b, a22.port_a) annotation (Line(
            points={{-50,74},{-50,84}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a23.port_a, a14.port_b) annotation (Line(
            points={{-94,26},{-94,40},{-90,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a13.port_a, a6.port_b) annotation (Line(
            points={{-68,52},{-60,52},{-60,36},{-50,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a24.port_a, a14.port_b) annotation (Line(
            points={{-100,22},{-100,40},{-90,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a14.port_b, a25.port_a) annotation (Line(
            points={{-90,40},{-110,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a26.port_a, a14.port_b) annotation (Line(
            points={{-114,22},{-106,22},{-106,40},{-90,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a17.port_b, a27.port_a) annotation (Line(
            points={{96,36},{114,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a28.port_a, a17.port_b) annotation (Line(
            points={{116,18},{106,18},{106,36},{96,36}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a17.port_b, a29.port_a) annotation (Line(
            points={{96,36},{106,36},{106,8},{120,8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a17.port_b, a30.port_a) annotation (Line(
            points={{96,36},{106,36},{106,8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a20.port_b, a31.port_a) annotation (Line(
            points={{10,124},{10,132}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a32.port_a, a31.port_a) annotation (Line(
            points={{26,132},{10,132}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a20.port_b, a33.port_a) annotation (Line(
            points={{10,124},{36,124}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a21.port_b, a34.port_a) annotation (Line(
            points={{2,-44},{2,-50}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a22.port_b, a35.port_a) annotation (Line(
            points={{-50,104},{-60,104}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a22.port_b, a36.port_a) annotation (Line(
            points={{-50,104},{-56,104},{-56,118},{-66,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a22.port_b, a37.port_a) annotation (Line(
            points={{-50,104},{-50,120}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a25.port_b, a38.port_a) annotation (Line(
            points={{-130,40},{-136,40},{-136,24},{-140,24}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a39.port_a, a25.port_b) annotation (Line(
            points={{-128,22},{-128,40},{-130,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a40.port_a, a25.port_b) annotation (Line(
            points={{-158,34},{-146,34},{-146,40},{-130,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a25.port_b, a41.port_a) annotation (Line(
            points={{-130,40},{-162,40}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a28.port_b, a42.port_a) annotation (Line(
            points={{136,18},{146,18},{146,16},{156,16}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a31.port_b, a43.port_a) annotation (Line(
            points={{10,152},{6,152},{6,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a43.port_a, a44.port_a) annotation (Line(
            points={{6,160},{6,168}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a45.port_a, a31.port_b) annotation (Line(
            points={{4,148},{6,148},{6,152},{10,152}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a47.port_a, a48.port_a) annotation (Line(
            points={{58,148},{62,148},{62,150},{66,150}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a32.port_b, a46.port_a) annotation (Line(
            points={{46,132},{46,148}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a32.port_b, a47.port_a) annotation (Line(
            points={{46,132},{52,132},{52,148},{58,148}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a34.port_b, a49.port_a) annotation (Line(
            points={{2,-70},{14,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a34.port_b, a50.port_a) annotation (Line(
            points={{2,-70},{4,-70},{4,-78}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a36.port_b, a51.port_a) annotation (Line(
            points={{-86,118},{-98,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a52.port_a, a36.port_b) annotation (Line(
            points={{-110,142},{-92,142},{-92,118},{-86,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a53.port_a, a51.port_a) annotation (Line(
            points={{-92,142},{-92,118},{-98,118}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a37.port_b, a54.port_a) annotation (Line(
            points={{-50,140},{-44,140},{-44,132},{-42,132}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a55.port_a, a37.port_b) annotation (Line(
            points={{-50,164},{-50,140}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a56.port_a, a37.port_b) annotation (Line(
            points={{-44,156},{-44,140},{-50,140}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a40.port_b, a57.port_a) annotation (Line(
            points={{-158,14},{-158,2},{-162,2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a42.port_b, a58.port_a) annotation (Line(
            points={{156,-4},{154,-4},{154,-8},{138,-8}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a59.port_a, a42.port_b) annotation (Line(
            points={{156,-12},{156,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a44.port_b, a60.port_a) annotation (Line(
            points={{6,188},{6,198}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a49.port_b, a61.port_a) annotation (Line(
            points={{34,-70},{50,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a62.port_a, a49.port_b) annotation (Line(
            points={{50,-56},{42,-56},{42,-70},{34,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a63.port_a, a49.port_b) annotation (Line(
            points={{48,-82},{42,-82},{42,-70},{34,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a50.port_b, a64.port_a) annotation (Line(
            points={{4,-98},{16,-98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a50.port_b, a65.port_a) annotation (Line(
            points={{4,-98},{4,-108}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a66.port_a, a50.port_b) annotation (Line(
            points={{-8,-102},{-2,-102},{-2,-98},{4,-98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a67.port_a, a50.port_b) annotation (Line(
            points={{-16,-98},{4,-98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a55.port_b, a68.port_a) annotation (Line(
            points={{-50,184},{-50,192}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a57.port_b, a69.port_a) annotation (Line(
            points={{-162,-18},{-162,-26}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a70.port_a, a57.port_b) annotation (Line(
            points={{-156,-18},{-162,-18}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a59.port_b, a71.port_a) annotation (Line(
            points={{156,-32},{156,-42}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a59.port_b, a72.port_a) annotation (Line(
            points={{156,-32},{166,-32},{166,-34},{174,-34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a73.port_a, a60.port_b) annotation (Line(
            points={{6,228},{6,218}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a60.port_b, a74.port_a) annotation (Line(
            points={{6,218},{14,218},{14,228},{20,228}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a65.port_b, a75.port_a) annotation (Line(
            points={{4,-128},{4,-134}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a68.port_b, a76.port_a) annotation (Line(
            points={{-50,212},{-60,212},{-60,226}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a77.port_a, a68.port_b) annotation (Line(
            points={{-44,226},{-44,212},{-50,212}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a69.port_b, a78.port_a) annotation (Line(
            points={{-162,-46},{-174,-46}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a69.port_b, a79.port_a) annotation (Line(
            points={{-162,-46},{-162,-56}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a71.port_b, a80.port_a) annotation (Line(
            points={{156,-62},{138,-62}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a71.port_b, a81.port_a) annotation (Line(
            points={{156,-62},{158,-62},{158,-70}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a75.port_b, a82.port_a) annotation (Line(
            points={{4,-154},{14,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a75.port_b, a83.port_a) annotation (Line(
            points={{4,-154},{4,-160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a84.port_a, a75.port_b) annotation (Line(
            points={{-4,-154},{4,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a79.port_b, a85.port_a) annotation (Line(
            points={{-162,-76},{-162,-86}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a79.port_b, a86.port_a) annotation (Line(
            points={{-162,-76},{-142,-76}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a81.port_b, a87.port_a) annotation (Line(
            points={{158,-90},{158,-100}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a81.port_b, a88.port_a) annotation (Line(
            points={{158,-90},{164,-90}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a82.port_b, a89.port_a) annotation (Line(
            points={{34,-154},{42,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a82.port_b, a90.port_a) annotation (Line(
            points={{34,-154},{34,-162}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a84.port_b, a91.port_a) annotation (Line(
            points={{-24,-154},{-24,-162}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a84.port_b, a92.port_a) annotation (Line(
            points={{-24,-154},{-32,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a2.port_a, a1.port_b) annotation (Line(
            points={{-18,16},{-18,10}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a85.port_b, a93.port_a) annotation (Line(
            points={{-162,-106},{-174,-106}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a85.port_b, a94.port_a) annotation (Line(
            points={{-162,-106},{-162,-114},{-160,-114}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a87.port_b, a95.port_a) annotation (Line(
            points={{158,-120},{158,-128}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a87.port_b, a96.port_a) annotation (Line(
            points={{158,-120},{136,-120}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a88.port_b, a97.port_a) annotation (Line(
            points={{184,-90},{194,-90}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a89.port_b, a98.port_a) annotation (Line(
            points={{62,-154},{74,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a92.port_b, a99.port_a) annotation (Line(
            points={{-52,-154},{-58,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a93.port_b, a100.port_a) annotation (Line(
            points={{-174,-126},{-182,-126}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a94.port_b, a101.port_a) annotation (Line(
            points={{-160,-134},{-144,-134}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a94.port_b, a102.port_a) annotation (Line(
            points={{-160,-134},{-160,-144}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a95.port_b, a103.port_a) annotation (Line(
            points={{158,-148},{158,-160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a98.port_b, a104.port_a) annotation (Line(
            points={{94,-154},{98,-154},{98,-156},{112,-156}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a105.port_a, a104.port_a) annotation (Line(
            points={{94,-164},{104,-164},{104,-156},{112,-156}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a99.port_b, a106.port_a) annotation (Line(
            points={{-78,-154},{-84,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a107.port_a, a106.port_a) annotation (Line(
            points={{-98,-154},{-84,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a102.port_b, a108.port_a) annotation (Line(
            points={{-160,-164},{-160,-170}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a104.port_b, a109.port_a) annotation (Line(
            points={{112,-176},{112,-186}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a107.port_b, a110.port_a) annotation (Line(
            points={{-98,-174},{-98,-180}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a109.port_b, a111.port_a) annotation (Line(
            points={{112,-206},{112,-216}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a110.port_b, a112.port_a) annotation (Line(
            points={{-98,-200},{-98,-206}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a111.port_b, a113.port_a) annotation (Line(
            points={{112,-236},{112,-246}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a112.port_b, a114.port_a) annotation (Line(
            points={{-98,-226},{-98,-232},{-96,-232}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a113.port_b, a115.port_a) annotation (Line(
            points={{112,-266},{112,-274}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a116.port_a, a113.port_b) annotation (Line(
            points={{98,-266},{112,-266}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a114.port_b, a117.port_a) annotation (Line(
            points={{-96,-252},{-86,-252}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a114.port_b, a118.port_a) annotation (Line(
            points={{-96,-252},{-92,-252},{-92,-260},{-96,-260}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a115.port_b, a119.port_a) annotation (Line(
            points={{112,-294},{122,-294}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a115.port_b, a120.port_a) annotation (Line(
            points={{112,-294},{100,-294}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a116.port_b, a121.port_a) annotation (Line(
            points={{78,-266},{68,-266},{68,-268},{58,-268}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a117.port_b, a122.port_a) annotation (Line(
            points={{-66,-252},{-58,-252},{-58,-256},{-52,-256}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a118.port_b, a123.port_a) annotation (Line(
            points={{-96,-280},{-84,-280},{-84,-282},{-72,-282}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a124.port_a, a118.port_b) annotation (Line(
            points={{-116,-282},{-106,-282},{-106,-280},{-96,-280}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a119.port_b, a125.port_a) annotation (Line(
            points={{142,-294},{160,-294}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a120.port_b, a126.port_a) annotation (Line(
            points={{80,-294},{72,-294}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a123.port_b, a127.port_a) annotation (Line(
            points={{-72,-302},{-64,-302},{-64,-304},{-62,-304}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a124.port_b, a128.port_a) annotation (Line(
            points={{-116,-302},{-122,-302},{-122,-304},{-126,-304}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a1.port_a, port_a) annotation (Line(
            points={{-18,-10},{-18,-34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(port_a, port_a) annotation (Line(
            points={{-18,-34},{-18,-34},{-18,-34}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(port_b, a9.port_b) annotation (Line(
            points={{300,0},{202,0},{202,-190},{122,-190},{122,-84},{86,-84},{86,-18},
                {26,-18},{26,-6}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a19.port_b, a9.port_b) annotation (Line(
            points={{54,-2},{54,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a18.port_b, a9.port_b) annotation (Line(
            points={{70,-2},{70,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a16.port_b, a9.port_b) annotation (Line(
            points={{78,0},{78,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a30.port_b, a9.port_b) annotation (Line(
            points={{106,-12},{106,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a29.port_b, a9.port_b) annotation (Line(
            points={{120,-12},{120,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a62.port_b, a9.port_b) annotation (Line(
            points={{70,-56},{86,-56},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a61.port_b, a9.port_b) annotation (Line(
            points={{70,-70},{86,-70},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a63.port_b, a9.port_b) annotation (Line(
            points={{68,-82},{86,-82},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a80.port_b, a9.port_b) annotation (Line(
            points={{118,-62},{86,-62},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a58.port_b, a9.port_b) annotation (Line(
            points={{138,-28},{112,-28},{112,-30},{86,-30},{86,-18},{26,-18},{
                26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a64.port_b, a9.port_b) annotation (Line(
            points={{36,-98},{122,-98},{122,-84},{86,-84},{86,-18},{26,-18},{26,
                -6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a96.port_b, a9.port_b) annotation (Line(
            points={{136,-140},{128,-140},{128,-144},{122,-144},{122,-84},{86,
                -84},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a103.port_b, a9.port_b) annotation (Line(
            points={{158,-180},{158,-190},{122,-190},{122,-84},{86,-84},{86,-18},
                {26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a97.port_b, a9.port_b) annotation (Line(
            points={{194,-110},{202,-110},{202,-190},{122,-190},{122,-84},{86,
                -84},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a72.port_b, a9.port_b) annotation (Line(
            points={{174,-54},{188,-54},{188,-56},{202,-56},{202,-190},{122,
                -190},{122,-84},{86,-84},{86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a27.port_b, a9.port_b) annotation (Line(
            points={{134,36},{202,36},{202,-190},{122,-190},{122,-84},{86,-84},
                {86,-18},{26,-18},{26,-6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a7.port_b, a46.port_b) annotation (Line(
            points={{56,50},{72,50},{72,124},{94,124},{94,178},{46,178},{46,168}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a47.port_b, a46.port_b) annotation (Line(
            points={{58,168},{58,178},{46,178},{46,168}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a48.port_b, a46.port_b) annotation (Line(
            points={{86,150},{94,150},{94,178},{46,178},{46,168}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a7.port_b, a9.port_b) annotation (Line(
            points={{56,50},{142,50},{142,36},{202,36},{202,-190},{122,-190},{122,-84},
                {86,-84},{86,-18},{26,-18},{26,-6}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a33.port_b, a46.port_b) annotation (Line(
            points={{56,124},{94,124},{94,178},{46,178},{46,168}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a46.port_b, a43.port_b) annotation (Line(
            points={{46,168},{46,256},{-14,256},{-14,160}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a56.port_b, a43.port_b) annotation (Line(
            points={{-24,156},{-18,156},{-18,170},{-14,170},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a73.port_b, a43.port_b) annotation (Line(
            points={{6,248},{6,256},{-14,256},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a74.port_b, a43.port_b) annotation (Line(
            points={{20,248},{24,248},{24,256},{-14,256},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a52.port_b, a43.port_b) annotation (Line(
            points={{-110,162},{-110,170},{-72,170},{-72,254},{-14,254},{-14,
                160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a77.port_b, a43.port_b) annotation (Line(
            points={{-44,246},{-44,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a76.port_b, a43.port_b) annotation (Line(
            points={{-60,246},{-60,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a53.port_b, a43.port_b) annotation (Line(
            points={{-92,162},{-92,170},{-72,170},{-72,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a51.port_b, a43.port_b) annotation (Line(
            points={{-118,118},{-124,118},{-124,170},{-72,170},{-72,254},{-14,
                254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a35.port_b, a43.port_b) annotation (Line(
            points={{-80,104},{-124,104},{-124,170},{-72,170},{-72,254},{-14,
                254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a13.port_b, a43.port_b) annotation (Line(
            points={{-68,72},{-68,84},{-122,84},{-122,104},{-124,104},{-124,170},
                {-72,170},{-72,254},{-14,254},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a41.port_b, a43.port_b) annotation (Line(
            points={{-182,40},{-182,58},{-82,58},{-82,84},{-122,84},{-122,104},{-124,104},
                {-124,170},{-72,170},{-72,254},{-14,254},{-14,160}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a41.port_b, a78.port_b) annotation (Line(
            points={{-182,40},{-184,40},{-184,-30},{-194,-30},{-194,-46}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a78.port_b, a100.port_b) annotation (Line(
            points={{-194,-46},{-194,-146},{-182,-146}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a100.port_b, a108.port_b) annotation (Line(
            points={{-182,-146},{-182,-188},{-160,-188},{-160,-190}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a108.port_b, a101.port_b) annotation (Line(
            points={{-160,-190},{-152,-190},{-152,-192},{-144,-192},{-144,-154}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a101.port_b, a86.port_b) annotation (Line(
            points={{-144,-154},{-122,-154},{-122,-76}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a86.port_b, a70.port_b) annotation (Line(
            points={{-122,-76},{-122,-18},{-136,-18}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a70.port_b, a38.port_b) annotation (Line(
            points={{-136,-18},{-138,-18},{-138,4},{-140,4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a38.port_b, a39.port_b) annotation (Line(
            points={{-140,4},{-134,4},{-134,2},{-128,2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a39.port_b, a26.port_b) annotation (Line(
            points={{-128,2},{-120,2},{-120,-2},{-114,-2},{-114,2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a26.port_b, a24.port_b) annotation (Line(
            points={{-114,2},{-100,2}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a24.port_b, a23.port_b) annotation (Line(
            points={{-100,2},{-96,2},{-96,6},{-94,6}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a23.port_b, a15.port_b) annotation (Line(
            points={{-94,6},{-72,6},{-72,0},{-54,0}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a15.port_b, a67.port_b) annotation (Line(
            points={{-54,0},{-54,-50},{-36,-50},{-36,-98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a66.port_b, a67.port_b) annotation (Line(
            points={{-8,-122},{-22,-122},{-22,-124},{-38,-124},{-38,-98},{-36,
                -98}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a128.port_b, a101.port_b) annotation (Line(
            points={{-126,-324},{-144,-324},{-144,-154}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a128.port_b, a127.port_b) annotation (Line(
            points={{-126,-324},{-62,-324}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a127.port_b, a122.port_b) annotation (Line(
            points={{-62,-324},{-52,-324},{-52,-276}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a122.port_b, a106.port_b) annotation (Line(
            points={{-52,-276},{-48,-276},{-48,-182},{-84,-182},{-84,-174}},
            color={220,220,220},
            thickness=1,
            smooth=Smooth.None));
        connect(a91.port_b, a106.port_b) annotation (Line(
            points={{-24,-182},{-84,-182},{-84,-174}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a91.port_b, a83.port_b) annotation (Line(
            points={{-24,-182},{-10,-182},{-10,-180},{4,-180}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a83.port_b, a90.port_b) annotation (Line(
            points={{4,-180},{20,-180},{20,-182},{34,-182}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a90.port_b, a105.port_b) annotation (Line(
            points={{34,-182},{64,-182},{64,-184},{94,-184}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a105.port_b, a121.port_b) annotation (Line(
            points={{94,-184},{94,-248},{50,-248},{50,-288},{58,-288}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a121.port_b, a126.port_b) annotation (Line(
            points={{58,-288},{60,-288},{60,-314},{72,-314}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a126.port_b, a125.port_b) annotation (Line(
            points={{72,-314},{160,-314}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a54.port_b, a45.port_b) annotation (Line(
            points={{-22,132},{-20,132},{-20,148},{-16,148}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(a45.port_b, a43.port_b) annotation (Line(
            points={{-16,148},{-18,148},{-18,170},{-14,170},{-14,160}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-300,-340},{300,
                  300}})),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-300,-340},
                  {300,300}}), graphics={Bitmap(
                extent={{-276,-320},{258,286}},
                imageSource=
                    ""
                     +
                    ""
                     +
                    ""
                     +
                    "",
                fileName=
                    "modelica://Cardiovascular/Resources/Icons/avoliotree.png")}),
          Documentation(info="<html>
<p>Implementation of Arterial tree </p>
<ul>
<li>A. Avolio, Multi-branched model of the human arterial system., Med. Biol. Eng. Comput. 18 (1980) 709&ndash;718. doi:10.1007/BF02441895.</li>
</ul>
<p>With these corrections against original diagram in Fig.1:</p>
<ul>
<li>8 between 3 and 17 not labeled</li>
<li>22 (doubled) after 17 should be 27</li>
<li>23 (doubled) next to 30 should be 29</li>
<li>45 after 31 should be 43</li>
<li>35 (doubled) after 31 should be 43</li>
<li>57 (doubled) after 37 should be 54<br></li>
</ul>
</html>"));
      end ArterialTree;

      model PulsatileCirculation
        "Model of cardiovascular system with pulsatile dynamic"
                                extends Physiolibrary.Icons.CardioVascular;
        Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(
            useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
            7.425609600872e-08)                                      annotation(Placement(transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}})));
        Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(
            volumeFlow_start(displayUnit="m3/s") = 2.225e-05, I(displayUnit=
                "Pa.s2/m3") = 410632.9532382)                            annotation(Placement(transformation(origin={-278,60},    extent = {{15, -15}, {-15, 15}})));
        Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(
            useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
            2.2216823876548e-07)                                      annotation(Placement(transformation(origin={200,58},    extent = {{17.5, -17.5}, {-17.5, 17.5}})));
        Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(
            volumeFlow_start(displayUnit="ml/min") = 7.3233333333333e-07, I(
              displayUnit="mmHg.s2/ml") = 99991.79056125)                   annotation(Placement(transformation(origin={158,58},    extent = {{15, -15}, {-15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(
          useComplianceInput=false,
          volume_start(displayUnit="ml") = 0.0006597,
          ZeroPressureVolume=0.0001,
          Compliance(displayUnit="ml/mmHg") = 3.5027875591992e-07)      annotation(Placement(transformation(origin={-279,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.IdealValve mitralValve(
                                    useLimitationInputs=false, _Gon(displayUnit=
               "ml/(mmHg.s)") = 1.9996641612045e-06)              annotation(Placement(transformation(origin={-243,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
            useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=0.0002097,
          ZeroPressureVolume=9e-05)                                    annotation(Placement(transformation(origin={-209,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput=false,
            Conductance(displayUnit="m3/(Pa.s)") = 9.3757696980707e-08)
                                                              annotation(Placement(transformation(origin={-181,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit="ml/(mmHg.s)")=
               1.9996641612045e-06, useLimitationInputs=false)    annotation(Placement(transformation(origin={-143,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput=false,
            Conductance(displayUnit="ml/(mmHg.s)") = 7.5006157584566e-09)
                                                               annotation(Placement(transformation(origin={31,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.Inertia systemicInertia(
            volumeFlow_start(displayUnit="m3/s") = 7.935e-05, I(displayUnit=
                "Pa.s2/m3") = 479960.594694)                       annotation(Placement(transformation(origin={75,-3},     extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(
            useLimitationInputs=false, _Gon(displayUnit="ml/(mmHg.s)") = 1.9996641612045e-06)
                                                                     annotation(Placement(transformation(origin={137,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
            useComplianceInput=true,
          useExternalPressureInput=true,
          volume_start=0.00018,
          ZeroPressureVolume=7e-05)                                     annotation(Placement(transformation(origin={171,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput=false,
            Conductance(displayUnit="m3/(Pa.s)") = 4.2858518443821e-07)
                                                               annotation(Placement(transformation(origin={207,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit=
               "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs=false)
                                                                     annotation(Placement(transformation(origin={245,-3},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(
          volume_start=2.1e-05,
          ZeroPressureVolume=2e-05,
          Compliance(displayUnit="m3/Pa") = 6.7505541826109e-10)         annotation(Placement(transformation(origin={243,57},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(
          volume_start=0.000637,
          ZeroPressureVolume=0.0006,
          Compliance(displayUnit="ml/mmHg") = 2.0026644075079e-08)           annotation(Placement(transformation(origin={124,58},    extent = {{-15, -15}, {15, 15}})));
        Physiolibrary.Hydraulic.Components.ElasticVessel veins(
          Compliance(displayUnit="ml/mmHg") = 1.5001231516913e-07,
          volume_start(displayUnit="ml") = 0.002643,
          ZeroPressureVolume=0.00237)
          annotation (Placement(transformation(
              origin={107,-3},
              extent={{-15,-15},{15,15}})));
        Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
          timeVaryingElastanceLeft(
          Ed(displayUnit="mmHg/ml") = 13332238.7415,
          Es(displayUnit="mmHg/ml") = 183318282.69563,
          Pi0(displayUnit="mmHg") = 6666.11937075)
          annotation (Placement(transformation(extent={{-222,16},{-202,36}})));
        Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
          timeVaryingElastanceRight(
          Ed(displayUnit="mmHg/ml") = 3999671.62245,
          Es(displayUnit="mmHg/ml") = 43729743.0721,
          Pi0(displayUnit="mmHg") = 3199.73729796)
          annotation (Placement(transformation(extent={{164,18},{184,38}})));
        Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit=
                "Hz") = 1.2)
          annotation (Placement(transformation(extent={{-262,30},{-244,42}})));
          //a1(      L=0.04,      R=0.0145,      h=0.00163,      E=4000)
        AvolioTree avolioTree(a42(R=2.8e-05))
          annotation (Placement(transformation(extent={{-92,-38},{-32,26}})));
      equation
        connect(systemicInertia.q_out, veins.q_in) annotation (Line(
            points={{90,-3},{107,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(timeVaryingElastanceLeft.C, leftVentricle.compliance)
          annotation (Line(
            points={{-212,17},{-209,17},{-209,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeVaryingElastanceRight.C, rightVentricle.compliance)
          annotation (Line(
            points={{174,19},{174,9},{171,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(veins.q_in, tricuspidValve.q_in) annotation (Line(
            points={{107,-3},{122,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure)
          annotation (Line(
            points={{-205,17},{-205,16.5},{-197,16.5},{-197,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure)
          annotation (Line(
            points={{181,19},{181,9},{183,9}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation (Line(
            points={{-241.75,36},{-232.375,36},{-232.375,33.6},{-220.6,33.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RSystemic.q_out, systemicInertia.q_in) annotation (Line(
            points={{46,-3},{60,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(rightVentricle.q_in, tricuspidValve.q_out) annotation (Line(
            points={{171,-3},{152,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RRightMyo.q_in, rightVentricle.q_in) annotation (Line(
            points={{192,-3},{171,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(heartRate.y, timeVaryingElastanceRight.HR) annotation (Line(
            points={{-241.75,36},{-34,36},{-34,35.6},{165.4,35.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (Line(
            points={{222,-3},{230,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation (Line(
            points={{260,-3},{266,-3},{266,57},{243,57}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation (Line(
            points={{243,57},{243,58},{217.5,58}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in)
          annotation (Line(
            points={{182.5,58},{173,58}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in)
          annotation (Line(
            points={{143,58},{124,58}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation (
            Line(
            points={{124,58},{-42,58},{-42,60},{-205,60}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation (
            Line(
            points={{-235,60},{-263,60}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation (
            Line(
            points={{-293,60},{-296,60},{-296,-3},{-279,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation (Line(
            points={{-279,-3},{-258,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
            points={{-228,-3},{-209,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(leftVentricle.q_in, RLeftMyo.q_in) annotation (Line(
            points={{-209,-3},{-196,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(RLeftMyo.q_out, aorticValve.q_in) annotation (Line(
            points={{-166,-3},{-158,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(aorticValve.q_out, avolioTree.port_a) annotation (Line(
            points={{-128,-3},{-108,-3},{-108,-4},{-92,-4}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        connect(avolioTree.port_b, RSystemic.q_in) annotation (Line(
            points={{-32,-4},{-8,-4},{-8,-3},{16,-3}},
            color={0,0,0},
            thickness=1,
            smooth=Smooth.None));
        annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,  grid = {2, 2})),
                                                                                                    Icon(coordinateSystem(extent={{-350,
                  -100},{400,100}},                                                                                                    preserveAspectRatio = true, grid = {2, 2})),
          Documentation(info="<html>
<p>Model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>",       revisions="<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"),experiment(
            StopTime=15,
            __Dymola_NumberOfIntervals=5000,
            Tolerance=1e-06),
          __Dymola_experimentSetupOutput);
      end PulsatileCirculation;

      package Test
        model PulsatileCirculation
          "Model of cardiovascular system with pulsatile dynamic"
                                  extends Physiolibrary.Icons.CardioVascular;
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              7.425609600872e-08)                                      annotation(Placement(transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(
              volumeFlow_start(displayUnit="m3/s") = 2.225e-05, I(displayUnit=
                  "Pa.s2/m3") = 410632.9532382)                            annotation(Placement(transformation(origin={-278,60},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              2.2216823876548e-07)                                      annotation(Placement(transformation(origin={200,58},    extent = {{17.5, -17.5}, {-17.5, 17.5}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(
              volumeFlow_start(displayUnit="ml/min") = 7.3233333333333e-07, I(
                displayUnit="mmHg.s2/ml") = 99991.79056125)                   annotation(Placement(transformation(origin={158,58},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(
            useComplianceInput=false,
            volume_start(displayUnit="ml") = 0.0006597,
            ZeroPressureVolume=0.0001,
            Compliance(displayUnit="ml/mmHg") = 3.5027875591992e-07)      annotation(Placement(transformation(origin={-279,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve mitralValve(
                                      useLimitationInputs=false, _Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06)              annotation(Placement(transformation(origin={-243,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.0002097,
            ZeroPressureVolume=9e-05)                                    annotation(Placement(transformation(origin={-209,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 9.3757696980707e-08)
                                                                annotation(Placement(transformation(origin={-181,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit="ml/(mmHg.s)")=
                 1.9996641612045e-06, useLimitationInputs=false)    annotation(Placement(transformation(origin={-143,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput=false,
              Conductance(displayUnit="ml/(mmHg.s)") = 7.5006157584566e-09)
                                                                 annotation(Placement(transformation(origin={31,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia systemicInertia(
              volumeFlow_start(displayUnit="m3/s") = 7.935e-05, I(displayUnit=
                  "Pa.s2/m3") = 479960.594694)                       annotation(Placement(transformation(origin={75,-3},     extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(
              useLimitationInputs=false, _Gon(displayUnit="ml/(mmHg.s)") = 1.9996641612045e-06)
                                                                       annotation(Placement(transformation(origin={137,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.00018,
            ZeroPressureVolume=7e-05)                                     annotation(Placement(transformation(origin={171,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 4.2858518443821e-07)
                                                                 annotation(Placement(transformation(origin={207,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs=false)
                                                                       annotation(Placement(transformation(origin={245,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(
            volume_start=2.1e-05,
            ZeroPressureVolume=2e-05,
            Compliance(displayUnit="m3/Pa") = 6.7505541826109e-10)         annotation(Placement(transformation(origin={243,57},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(
            volume_start=0.000637,
            ZeroPressureVolume=0.0006,
            Compliance(displayUnit="ml/mmHg") = 2.0026644075079e-08)           annotation(Placement(transformation(origin={124,58},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel veins(
            Compliance(displayUnit="ml/mmHg") = 1.5001231516913e-07,
            volume_start(displayUnit="ml") = 0.002943,
            ZeroPressureVolume=0.00237)
            annotation (Placement(transformation(
                origin={105,-1},
                extent={{-15,-15},{15,15}})));
          Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
            timeVaryingElastanceLeft(
            Ed(displayUnit="mmHg/ml") = 13332238.7415,
            Es(displayUnit="mmHg/ml") = 183318282.69563,
            Pi0(displayUnit="mmHg") = 6666.11937075)
            annotation (Placement(transformation(extent={{-222,16},{-202,36}})));
          Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
            timeVaryingElastanceRight(
            Ed(displayUnit="mmHg/ml") = 3999671.62245,
            Es(displayUnit="mmHg/ml") = 43729743.0721,
            Pi0(displayUnit="mmHg") = 3199.73729796)
            annotation (Placement(transformation(extent={{164,18},{184,38}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit=
                  "Hz") = 1.2)
            annotation (Placement(transformation(extent={{-262,30},{-244,42}})));
            //a1(      L=0.04,      R=0.0145,      h=0.00163,      E=4000)
          ArterialTree2 arterialTree(a1(
              E=4000.0,
              L=0.16,
              R=0.0045,
              h=0.00163,
              elastance(volume_start=0.000089)))
            annotation (Placement(transformation(extent={{-92,-36},{-32,28}})));
        equation
          connect(systemicInertia.q_out, veins.q_in) annotation (Line(
              points={{90,-3},{98,-3},{98,-1},{105,-1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastanceLeft.C, leftVentricle.compliance)
            annotation (Line(
              points={{-212,17},{-209,17},{-209,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastanceRight.C, rightVentricle.compliance)
            annotation (Line(
              points={{174,19},{174,9},{171,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(veins.q_in, tricuspidValve.q_in) annotation (Line(
              points={{105,-1},{114,-1},{114,-3},{122,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure)
            annotation (Line(
              points={{-205,17},{-205,16.5},{-197,16.5},{-197,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure)
            annotation (Line(
              points={{181,19},{181,9},{183,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation (Line(
              points={{-241.75,36},{-232.375,36},{-232.375,33.6},{-220.6,33.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RSystemic.q_out, systemicInertia.q_in) annotation (Line(
              points={{46,-3},{60,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(rightVentricle.q_in, tricuspidValve.q_out) annotation (Line(
              points={{171,-3},{152,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RRightMyo.q_in, rightVentricle.q_in) annotation (Line(
              points={{192,-3},{171,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastanceRight.HR) annotation (Line(
              points={{-241.75,36},{-34,36},{-34,35.6},{165.4,35.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{222,-3},{230,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation (Line(
              points={{260,-3},{266,-3},{266,57},{243,57}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation (Line(
              points={{243,57},{243,58},{217.5,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in)
            annotation (Line(
              points={{182.5,58},{173,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in)
            annotation (Line(
              points={{143,58},{124,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation (
              Line(
              points={{124,58},{-42,58},{-42,60},{-205,60}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation (
              Line(
              points={{-235,60},{-263,60}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation (
              Line(
              points={{-293,60},{-296,60},{-296,-3},{-279,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation (Line(
              points={{-279,-3},{-258,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
              points={{-228,-3},{-209,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, RLeftMyo.q_in) annotation (Line(
              points={{-209,-3},{-196,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RLeftMyo.q_out, aorticValve.q_in) annotation (Line(
              points={{-166,-3},{-158,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, arterialTree.port_a) annotation (Line(
              points={{-128,-3},{-112,-3},{-112,-2},{-92,-2}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arterialTree.port_b, RSystemic.q_in) annotation (Line(
              points={{-32,-2},{-8,-2},{-8,-3},{16,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,  grid = {2, 2}),
                graphics),                                                                                                    Icon(coordinateSystem(extent={{-350,
                    -100},{400,100}},                                                                                                    preserveAspectRatio = true, grid = {2, 2})),
            Documentation(info="<html>
<p>Model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>",         revisions="<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"),  experiment(StopTime=5));
        end PulsatileCirculation;

        model ArterialTree
          Parts.ArterialSegment a1 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-18,0})));
          Parts.ArterialSegment a2 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-18,26})));
          Parts.ArterialSegment a3(branch=true)
                                   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={18,36})));
          Parts.ArterialSegment a5(branch=true)
                                   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={2,24})));
          Parts.ArterialSegment a6(branch=true, Rbref(displayUnit="(Pa.s)/m3"))
                                   annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-42,40})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
              Placement(transformation(extent={{-28,-44},{-8,-24}}),
                iconTransformation(extent={{-310,-10},{-290,10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation (
              Placement(transformation(extent={{290,-10},{310,10}}),
                iconTransformation(extent={{290,-10},{310,10}})));
        equation
          connect(a2.port_b, a3.port_a) annotation (Line(
              points={{-18,36},{8,36}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a5.port_a, a3.port_a) annotation (Line(
              points={{2,34},{2,36},{8,36}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a6.port_a, a2.port_b) annotation (Line(
              points={{-32,40},{-26,40},{-26,36},{-18,36}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a2.port_a, a1.port_b) annotation (Line(
              points={{-18,16},{-18,10}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(port_a, port_a) annotation (Line(
              points={{-18,-34},{-18,-34},{-18,-34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a6.port_b, port_b) annotation (Line(
              points={{-52,40},{-54,40},{-54,62},{272,62},{272,0},{300,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a3.port_b, port_b) annotation (Line(
              points={{28,36},{28,62},{272,62},{272,0},{300,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a5.port_b, port_b) annotation (Line(
              points={{2,14},{54,14},{54,62},{272,62},{272,0},{300,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(port_a, a1.port_a) annotation (Line(
              points={{-18,-34},{-18,-10}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-300,
                    -340},{300,300}}), graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-300,-340},
                    {300,300}}), graphics={
                Bitmap(extent={{-202,294},{212,-338}}, fileName=
                      "modelica://Cardiovascular/Resources/Icons/avoliotree.png"),
                Line(
                  points={{-292,-2},{-34,-2},{-6,112}},
                  color={0,0,255},
                  smooth=Smooth.None),
                Line(
                  points={{86,278},{110,276},{128,272},{156,234},{164,154},{190,
                      -8},{200,-18},{240,-20},{296,-2}},
                  color={0,0,255},
                  smooth=Smooth.None)}),
            Documentation(info="<html>
<p>Implementation of Arterial tree </p>
<ul>
<li>A. Avolio, Multi-branched model of the human arterial system., Med. Biol. Eng. Comput. 18 (1980) 709&ndash;718. doi:10.1007/BF02441895.</li>
</ul>
<p>With these corrections against original diagram in Fig.1:</p>
<ul>
<li>8 between 3 and 17 not labeled</li>
<li>22 (doubled) after 17 should be 27</li>
<li>23 (doubled) next to 30 should be 29</li>
<li>45 after 31 should be 43</li>
<li>35 (doubled) after 31 should be 43</li>
<li>57 (doubled) after 37 should be 54<br></li>
</ul>
</html>"));
        end ArterialTree;

        model Windkessel_2element "Two-element Windkessel model"
          extends Modelica.Icons.Example;
          Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
          Physiolibrary.Hydraulic.Components.Conductor resistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {18, 34})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
          Examples.Utilities.Pulses pulses(QP(displayUnit="m3/s") = 0.000424,
              HR=1.2)
            annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
          ArterialTree arterialTree
            annotation (Placement(transformation(extent={{-20,36},{12,70}})));
        equation
          connect(resistance.q_out, veins.y) annotation(Line(points = {{18, 24}, {18, 20}, {-30, 20}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(heart.q_out, arterialTree.port_a) annotation (Line(
              points={{-30,48},{-26,48},{-26,54.0625},{-20,54.0625}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arterialTree.port_b, resistance.q_in) annotation (Line(
              points={{12,54.0625},{16,54.0625},{18,54.0625},{18,54},{18,44},{
                  18,44}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics={  Text(extent = {{-74, 90}, {46, 80}}, lineColor = {175, 175, 175}, textString = "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>",     info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"),     experiment(StopTime = 5));
        end Windkessel_2element;

        model Windkessel_2elementtestinertia "Two-element Windkessel model"
          extends Modelica.Icons.Example;
          Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
          Physiolibrary.Hydraulic.Components.Conductor resistance(useConductanceInput = false, Conductance(displayUnit = "ml/(mmHg.s)") = 8.1006650191331e-09) annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin={94,34})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
          Examples.Utilities.Pulses pulses(QP(displayUnit="m3/s") = 0.000424,
              HR=1.2)
            annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia(I(displayUnit=
                  "mmHg.s2/ml") = 19998358.11225)
            annotation (Placement(transformation(extent={{-10,38},{10,58}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel
            annotation (Placement(transformation(extent={{12,38},{32,58}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-08)
            annotation (Placement(transformation(extent={{-22,58},{-2,78}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor1(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-08)
            annotation (Placement(transformation(extent={{30,60},{50,80}})));
          Physiolibrary.Hydraulic.Components.Inertia inertia1(I(displayUnit=
                  "mmHg.s2/ml") = 19998358.11225)
            annotation (Placement(transformation(extent={{50,38},{70,58}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel1
            annotation (Placement(transformation(extent={{78,58},{98,78}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel2
            annotation (Placement(transformation(extent={{-44,64},{-24,84}})));
        equation
          connect(resistance.q_out, veins.y) annotation(Line(points={{94,24},{
                  94,20},{-30,20}},                                                                    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(inertia.q_out, elasticVessel.q_in) annotation (Line(
              points={{10,48},{22,48}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia.q_in, conductor.q_out) annotation (Line(
              points={{-10,48},{-10,68},{-2,68}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(elasticVessel.q_in, conductor1.q_in) annotation (Line(
              points={{22,48},{26,48},{26,70},{30,70}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia1.q_in, conductor1.q_out) annotation (Line(
              points={{50,48},{50,70}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(inertia1.q_out, elasticVessel1.q_in) annotation (Line(
              points={{70,48},{80,48},{80,68},{88,68}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(resistance.q_in, elasticVessel1.q_in) annotation (Line(
              points={{94,44},{96,44},{96,48},{98,48},{98,68},{88,68}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heart.q_out, elasticVessel2.q_in) annotation (Line(
              points={{-30,48},{-34,48},{-34,74},{-34,74}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(elasticVessel2.q_in, conductor.q_in) annotation (Line(
              points={{-34,74},{-28,74},{-28,68},{-22,68}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics={  Text(extent = {{-74, 90}, {46, 80}}, lineColor = {175, 175, 175}, textString = "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>",     info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"),     experiment(StopTime = 5));
        end Windkessel_2elementtestinertia;

        model ArterialTree2
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_a annotation (
              Placement(transformation(extent={{-28,-44},{-8,-24}}),
                iconTransformation(extent={{-310,-10},{-290,10}})));
          Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b port_b annotation (
              Placement(transformation(extent={{290,-10},{310,10}}),
                iconTransformation(extent={{290,-10},{310,10}})));
          Parts.ArterialSegment a1 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-18,-2})));
        equation
          connect(port_a, port_a) annotation (Line(
              points={{-18,-34},{-18,-34},{-18,-34}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(port_a, a1.port_a) annotation (Line(
              points={{-18,-34},{-18,-12}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(a1.port_b, port_b) annotation (Line(
              points={{-18,8},{142,8},{142,0},{300,0}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-300,
                    -340},{300,300}}), graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-300,-340},
                    {300,300}}), graphics={
                Bitmap(extent={{-202,294},{212,-338}}, fileName=
                      "modelica://Cardiovascular/Resources/Icons/avoliotree.png"),
                Line(
                  points={{-292,-2},{-34,-2},{-6,112}},
                  color={0,0,255},
                  smooth=Smooth.None),
                Line(
                  points={{86,278},{110,276},{128,272},{156,234},{164,154},{190,
                      -8},{200,-18},{240,-20},{296,-2}},
                  color={0,0,255},
                  smooth=Smooth.None)}),
            Documentation(info="<html>
<p>Implementation of Arterial tree </p>
<ul>
<li>A. Avolio, Multi-branched model of the human arterial system., Med. Biol. Eng. Comput. 18 (1980) 709&ndash;718. doi:10.1007/BF02441895.</li>
</ul>
<p>With these corrections against original diagram in Fig.1:</p>
<ul>
<li>8 between 3 and 17 not labeled</li>
<li>22 (doubled) after 17 should be 27</li>
<li>23 (doubled) next to 30 should be 29</li>
<li>45 after 31 should be 43</li>
<li>35 (doubled) after 31 should be 43</li>
<li>57 (doubled) after 37 should be 54<br></li>
</ul>
</html>"));
        end ArterialTree2;

        model Windkessel_test2 "Two-element Windkessel model"
          extends Modelica.Icons.Example;
          import Modelica.Units.SI.*;
            inner parameter Real arterialStiffnessScale = 1;
              inner parameter Length cannulaOuterDiameter = 0.007
            "Outer diameter of ECMO cannulas (derived tree only)";
          inner parameter Length cannulaDepth = 0.007;
          Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins(P=666.611937075)
                                                                annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
          Examples.Utilities.Pulses pulses(QP(displayUnit="m3/s") = 0.000424,
              HR=1.2)
            annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
          Parts.ArterialSegment arterialSegment(
            L=0.04,
            R=0.0145,
            h=0.00163) annotation (Placement(transformation(extent={{-16,38},{4,58}})));
          Parts.ArterialSegment arterialSegment1(
            L=0.02,
            R=0.0112,
            h=0.00132) annotation (Placement(transformation(extent={{20,38},{40,58}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-07) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={24,20})));
          Physiolibrary.Hydraulic.Sources.UnlimitedPump heart1(
                                                              useSolutionFlowInput = true) annotation(Placement(transformation(extent={{-60,-38},
                    {-40,-18}})));
          Examples.Utilities.Pulses pulses1(
                                           QP(displayUnit="m3/s") = 0.000424,
              HR=1.2)
            annotation (Placement(transformation(extent={{-74,-18},{-54,2}})));
          Cardio.Components.Auxiliary.RLC.Tubes.TubeRLC_Derived tubeRLC_Derived(
            l=0.04,
            r=0.0145,
            h=0.00163,
            E=39996.7162245)
            annotation (Placement(transformation(extent={{-26,-44},{24,-12}})));
          Cardio.Components.Auxiliary.RLC.Tubes.TubeRLC_Derived tubeRLC_Derived1(
            l=0.02,
            r=0.0112,
            h=0.00132,
            E(displayUnit="mmHg") = 39996.7162245)
            annotation (Placement(transformation(extent={{32,-44},{82,-12}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor1(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-07) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={40,-70})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins1(P=666.611937075)
                                                                annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-50,-64})));
        equation
          connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(heart.q_out, arterialSegment.port_a) annotation (Line(
              points={{-30,48},{-16,48}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arterialSegment.port_b, arterialSegment1.port_a) annotation (Line(
              points={{4,48},{20,48}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(conductor.q_in, arterialSegment1.port_b) annotation (Line(
              points={{34,20},{44,20},{44,48},{40,48}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(conductor.q_out, veins.y) annotation (Line(
              points={{14,20},{-30,20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulses1.volumeflowrate, heart1.solutionFlow) annotation (Line(
              points={{-55,-8},{-50,-8},{-50,-21}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heart1.q_out, tubeRLC_Derived.cIn) annotation (Line(
              points={{-40,-28},{-26,-28}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(tubeRLC_Derived.cOut, tubeRLC_Derived1.cIn) annotation (Line(
              points={{24,-28},{32,-28}},
              color={229,133,64},
              smooth=Smooth.None));
          connect(tubeRLC_Derived1.cOut, conductor1.q_in) annotation (Line(
              points={{82,-28},{84,-28},{84,-70},{50,-70}},
              color={229,133,64},
              smooth=Smooth.None));
          connect(veins1.y, conductor1.q_out) annotation (Line(
              points={{-40,-64},{-6,-64},{-6,-70},{30,-70}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics={  Text(extent = {{-74, 90}, {46, 80}}, lineColor = {175, 175, 175}, textString = "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>",     info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"),     experiment(StopTime = 5));
        end Windkessel_test2;

        model Windkessel_test3 "Two-element Windkessel model"
          extends Modelica.Icons.Example;
          import Modelica.Units.SI.*;
          Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins(P=666.611937075)
                                                                annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
          Examples.Utilities.Pulses pulses(QP(displayUnit="m3/s") = 0.000424,
              HR=1.2)
            annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
          Parts.ArterialSegment arterialSegment(
            L=0.04,
            R=0.0145,
            h=0.00163) annotation (Placement(transformation(extent={{-16,38},{4,58}})));
          Parts.ArterialSegment arterialSegment1(
            L=0.02,
            R=0.0112,
            h=0.00132) annotation (Placement(transformation(extent={{20,38},{40,58}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-07) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={24,20})));
        equation
          connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(heart.q_out, arterialSegment.port_a) annotation (Line(
              points={{-30,48},{-16,48}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(arterialSegment.port_b, arterialSegment1.port_a) annotation (Line(
              points={{4,48},{20,48}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(conductor.q_in, arterialSegment1.port_b) annotation (Line(
              points={{34,20},{44,20},{44,48},{40,48}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(conductor.q_out, veins.y) annotation (Line(
              points={{14,20},{-30,20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics={  Text(extent = {{-74, 90}, {46, 80}}, lineColor = {175, 175, 175}, textString = "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>",     info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"),     experiment(StopTime = 5));
        end Windkessel_test3;

        model Windkessel_test4 "Two-element Windkessel model"
          extends Modelica.Icons.Example;
          import Modelica.Units.SI.*;
            inner parameter Real arterialStiffnessScale = 1;
              inner parameter Length cannulaOuterDiameter = 0.007
            "Outer diameter of ECMO cannulas (derived tree only)";
          inner parameter Length cannulaDepth = 0.007;
          Physiolibrary.Hydraulic.Sources.UnlimitedPump heart(useSolutionFlowInput = true) annotation(Placement(transformation(extent = {{-50, 38}, {-30, 58}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume veins(P=666.611937075)
                                                                annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-40, 20})));
          Examples.Utilities.Pulses pulses(QP(displayUnit="m3/s") = 0.000424,
              HR=1.2)
            annotation (Placement(transformation(extent={{-64,58},{-44,78}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-07) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={28,0})));
          AvolioTree avolioTree
            annotation (Placement(transformation(extent={{-10,16},{50,80}})));
        equation
          connect(pulses.volumeflowrate, heart.solutionFlow) annotation(Line(points = {{-45, 68}, {-40, 68}, {-40, 55}}, color = {0, 0, 127}, smooth = Smooth.None));
          connect(conductor.q_out, veins.y) annotation (Line(
              points={{18,1.11022e-15},{-8,1.11022e-15},{-8,20},{-30,20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heart.q_out, avolioTree.port_a) annotation (Line(
              points={{-30,48},{-26,48},{-26,50},{-10,50}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(avolioTree.port_b, conductor.q_in) annotation (Line(
              points={{50,50},{40,50},{40,-1.33227e-15},{38,-1.33227e-15}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{100,100}}),                                                                           graphics={  Text(extent = {{-74, 90}, {46, 80}}, lineColor = {175, 175, 175}, textString = "2-element Windkessel model")}), Documentation(revisions = "<html>
<ul>
<li><i>Sep 2014</i> by Tomas Kulhanek:
<br/>Updated pulse generator and diagram to conform electric analogy diagrams.
</li>
<li><i>May 2014 </i> by Marek Matejak:
<br/>Created.
</li>
</ul>
</html>",     info = "<html>
<p>Two-element windkessel model consisting of resistance and compliance element.</p>
<ul>
<li>Frank O (1899) Die Grundform des arteriellen Pulses. Z Biol 37:483&ndash;526</li>
<li>Westerhof, N., Lankhaar, J.-W., &AMP; Westerhof, B. E. (2009). The arterial Windkessel. <i>Medical &AMP; Biological Engineering &AMP; Computing</i>, <i>47</i>(2), 131&ndash;41. doi:10.1007/s11517-008-0359-2</li>
<li><a href=\"http://en.wikipedia.org/wiki/Windkessel_effect\">http://en.wikipedia.org/wiki/Windkessel_effect</a></li>
</ul>
</html>"),     experiment(StopTime = 5));
        end Windkessel_test4;

        model PulsatileCirculationTest1
          "Model of cardiovascular system with pulsatile dynamic"
                                  extends Physiolibrary.Icons.CardioVascular;
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              7.425609600872e-08)                                      annotation(Placement(transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(
              volumeFlow_start(displayUnit="m3/s") = 2.225e-05, I(displayUnit=
                  "Pa.s2/m3") = 410632.9532382)                            annotation(Placement(transformation(origin={-278,60},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              2.2216823876548e-07)                                      annotation(Placement(transformation(origin={200,58},    extent = {{17.5, -17.5}, {-17.5, 17.5}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(
              volumeFlow_start(displayUnit="ml/min") = 7.3233333333333e-07, I(
                displayUnit="mmHg.s2/ml") = 99991.79056125)                   annotation(Placement(transformation(origin={158,58},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(
            useComplianceInput=false,
            volume_start(displayUnit="ml") = 0.0006597,
            ZeroPressureVolume=0.0001,
            Compliance(displayUnit="ml/mmHg") = 3.5027875591992e-07)      annotation(Placement(transformation(origin={-279,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve mitralValve(
                                      useLimitationInputs=false, _Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06)              annotation(Placement(transformation(origin={-243,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.0002097,
            ZeroPressureVolume=9e-05)                                    annotation(Placement(transformation(origin={-209,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 9.3757696980707e-08)
                                                                annotation(Placement(transformation(origin={-181,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit="ml/(mmHg.s)")=
                 1.9996641612045e-06, useLimitationInputs=false)    annotation(Placement(transformation(origin={-143,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia systemicInertia(
              volumeFlow_start(displayUnit="m3/s") = 7.935e-05, I(displayUnit=
                  "Pa.s2/m3") = 479960.594694)                       annotation(Placement(transformation(origin={75,-3},     extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(
              useLimitationInputs=false, _Gon(displayUnit="ml/(mmHg.s)") = 1.9996641612045e-06)
                                                                       annotation(Placement(transformation(origin={137,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.00018,
            ZeroPressureVolume=7e-05)                                     annotation(Placement(transformation(origin={171,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 4.2858518443821e-07)
                                                                 annotation(Placement(transformation(origin={207,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs=false)
                                                                       annotation(Placement(transformation(origin={245,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(
            volume_start=2.1e-05,
            ZeroPressureVolume=2e-05,
            Compliance(displayUnit="m3/Pa") = 6.7505541826109e-10)         annotation(Placement(transformation(origin={243,57},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(
            volume_start=0.000637,
            ZeroPressureVolume=0.0006,
            Compliance(displayUnit="ml/mmHg") = 2.0026644075079e-08)           annotation(Placement(transformation(origin={124,58},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel veins(
            Compliance(displayUnit="ml/mmHg") = 1.5001231516913e-07,
            volume_start(displayUnit="ml") = 0.002643,
            ZeroPressureVolume=0.00237)
            annotation (Placement(transformation(
                origin={103,-3},
                extent={{-15,-15},{15,15}})));
          Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
            timeVaryingElastanceLeft(
            Ed(displayUnit="mmHg/ml") = 13332238.7415,
            Es(displayUnit="mmHg/ml") = 183318282.69563,
            Pi0(displayUnit="mmHg") = 6666.11937075)
            annotation (Placement(transformation(extent={{-222,16},{-202,36}})));
          Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
            timeVaryingElastanceRight(
            Ed(displayUnit="mmHg/ml") = 3999671.62245,
            Es(displayUnit="mmHg/ml") = 43729743.0721,
            Pi0(displayUnit="mmHg") = 3199.73729796)
            annotation (Placement(transformation(extent={{164,18},{184,38}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit=
                  "Hz") = 1.2)
            annotation (Placement(transformation(extent={{-262,30},{-244,42}})));
            //a1(      L=0.04,      R=0.0145,      h=0.00163,      E=4000)
          AvolioTree avolioTree
            annotation (Placement(transformation(extent={{-90,-38},{-30,26}})));
          Physiolibrary.Hydraulic.Components.Conductor RSystemic1(
                                                                 useConductanceInput=false,
              Conductance(displayUnit="ml/(mmHg.s)") = 7.5006157584566e-09)
                                                                 annotation(Placement(transformation(origin={19,1},     extent = {{-15, -15}, {15, 15}})));
        equation
          connect(systemicInertia.q_out, veins.q_in) annotation (Line(
              points={{90,-3},{103,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastanceLeft.C, leftVentricle.compliance)
            annotation (Line(
              points={{-212,17},{-209,17},{-209,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastanceRight.C, rightVentricle.compliance)
            annotation (Line(
              points={{174,19},{174,9},{171,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(veins.q_in, tricuspidValve.q_in) annotation (Line(
              points={{103,-3},{122,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure)
            annotation (Line(
              points={{-205,17},{-205,16.5},{-197,16.5},{-197,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure)
            annotation (Line(
              points={{181,19},{181,9},{183,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation (Line(
              points={{-241.75,36},{-232.375,36},{-232.375,33.6},{-220.6,33.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.q_in, tricuspidValve.q_out) annotation (Line(
              points={{171,-3},{152,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RRightMyo.q_in, rightVentricle.q_in) annotation (Line(
              points={{192,-3},{171,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastanceRight.HR) annotation (Line(
              points={{-241.75,36},{-34,36},{-34,35.6},{165.4,35.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{222,-3},{230,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation (Line(
              points={{260,-3},{266,-3},{266,57},{243,57}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation (Line(
              points={{243,57},{243,58},{217.5,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in)
            annotation (Line(
              points={{182.5,58},{173,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in)
            annotation (Line(
              points={{143,58},{124,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation (
              Line(
              points={{124,58},{-42,58},{-42,60},{-205,60}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation (
              Line(
              points={{-235,60},{-263,60}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation (
              Line(
              points={{-293,60},{-296,60},{-296,-3},{-279,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation (Line(
              points={{-279,-3},{-258,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
              points={{-228,-3},{-209,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, RLeftMyo.q_in) annotation (Line(
              points={{-209,-3},{-196,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RLeftMyo.q_out, aorticValve.q_in) annotation (Line(
              points={{-166,-3},{-158,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, avolioTree.port_a) annotation (Line(
              points={{-128,-3},{-108,-3},{-108,-4},{-90,-4}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(avolioTree.port_b, RSystemic1.q_in) annotation (Line(
              points={{-30,-4},{-12,-4},{-12,1},{4,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(systemicInertia.q_in, RSystemic1.q_out) annotation (Line(
              points={{60,-3},{48,-3},{48,1},{34,1}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,  grid = {2, 2}),
                graphics),                                                                                                    Icon(coordinateSystem(extent={{-350,
                    -100},{400,100}},                                                                                                    preserveAspectRatio = true, grid = {2, 2})),
            Documentation(info="<html>
<p>Model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>",         revisions="<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"),  experiment(StopTime=20));
        end PulsatileCirculationTest1;

        model testE
          Parts.ElasticVesselNP elasticVesselNP(
            volume_start=0.001,
            ZeroPressureVolume=0.0001,
            Compliance=9.0007389101479e-08)
            annotation (Placement(transformation(extent={{-30,14},{-10,34}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel elasticVessel(
            volume_start=0.001,
            ZeroPressureVolume=0.0001,
            Compliance=9.0007389101479e-08)
            annotation (Placement(transformation(extent={{-24,-36},{-4,-16}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-09)
            annotation (Placement(transformation(extent={{-6,16},{14,36}})));
          Physiolibrary.Hydraulic.Components.Conductor conductor1(Conductance(
                displayUnit="ml/(mmHg.s)") = 7.5006157584566e-09)
            annotation (Placement(transformation(extent={{8,-36},{28,-16}})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume(P=-533.28954966)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={58,24})));
          Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume1(P=-533.28954966)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={56,-22})));
        equation
          connect(elasticVesselNP.q_in, conductor.q_in) annotation (Line(
              points={{-20,24},{-12,24},{-12,26},{-6,26}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(conductor.q_out, unlimitedVolume.y) annotation (Line(
              points={{14,26},{34,26},{34,24},{48,24}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(elasticVessel.q_in, conductor1.q_in) annotation (Line(
              points={{-14,-26},{8,-26}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(conductor1.q_out, unlimitedVolume1.y) annotation (Line(
              points={{28,-26},{38,-26},{38,-22},{46,-22}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics));
        end testE;

        model HemodynamicsBurkhoff_AvolioTree
          //Cardiovascular.Hydraulic.Components.Resistor
          //Cardiovascular.Hydraulic.Components.IdealValveNorm
          Physiolibrary.Hydraulic.Components.ElasticVessel Cvs(
            volume_start=0.002101,
            ZeroPressureVolume=0.00223,
            Compliance=5.2504310309196e-07)                                                                                                     annotation(Placement(transformation(extent={{-80,12},
                    {-60,32}})));
          CardiovascularDevel.Hydraulic.Components.IdealValveNorm AOV(R_on=
                266644.77483) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={80,-4})));
          Burkhoff.Parts.ElasticVesselWithSVandP LV(
            useComplianceInput=true,
            volume_start=0.000125,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=true)
            annotation (Placement(transformation(extent={{92,-14},{112,6}})));
          CardiovascularDevel.Hydraulic.Components.IdealValveNorm MV(R_on=
                333305.9685375) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={122,-4})));
          Burkhoff.Parts.ElasticVesselWithSVandP LA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=8.1e-05,
            ZeroPressureVolume=5e-06)
            annotation (Placement(transformation(extent={{158,-14},{178,6}})));
          CardiovascularDevel.Hydraulic.Components.Resistor Rvp(Resistance=
                1999835.811225)
            annotation (Placement(transformation(extent={{206,-2},{186,18}})));
          CardiovascularDevel.Hydraulic.Components.Resistor Rvs(Resistance=
                2666447.7483)
            annotation (Placement(transformation(extent={{-84,-50},{-64,-30}})));
          Burkhoff.Parts.ElasticVesselWithSVandP RA(
            useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=7.3e-05,
            ZeroPressureVolume=5e-06) annotation (Placement(transformation(
                  extent={{-60,-50},{-40,-30}})));
          CardiovascularDevel.Hydraulic.Components.IdealValveNorm TV(R_on(
                displayUnit="(mmHg.s)/ml") = 333305.9685375) annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={4,-40})));
          Burkhoff.Parts.ElasticVesselWithSVandP RV(
            useComplianceInput=true,
            ExternalPressure=0,
            volume_start=0.000112,
            ZeroPressureVolume=5e-06,
            useExternalPressureInput=true)
            annotation (Placement(transformation(extent={{16,-50},{36,-30}})));
          CardiovascularDevel.Hydraulic.Components.IdealValveNorm PV(R_on=
                266644.77483) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={50,-40})));
          CardiovascularDevel.Hydraulic.Components.Resistor Rcsp(Resistance=
                2666447.7483)
            annotation (Placement(transformation(extent={{70,-50},{90,-30}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Cap(
            volume_start=0.000802,
            ZeroPressureVolume=0.0006,
            Compliance=1.5001231516913e-07,
            useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{144, -48}, {164, -28}})));
          CardiovascularDevel.Hydraulic.Components.Resistor Rcp(Resistance=
                2666447.7483)
            annotation (Placement(transformation(extent={{122,-48},{142,-28}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Cvp(
            volume_start=0.000154,
            ZeroPressureVolume=0.0001,
            Compliance=5.2504310309196e-08,
            useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{184, -48}, {204, -28}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel Capprox(
            volume_start=3e-05,
            ZeroPressureVolume=2e-05,
            Compliance=7.5006157584566e-09,
            useExternalPressureInput=true)                                                                                                     annotation(Placement(transformation(extent = {{98, -48}, {118, -28}})));
          CardiovascularDevel.Hydraulic.Components.Resistor Rap(Resistance=
                2666447.7483)
            annotation (Placement(transformation(extent={{164,-48},{184,-28}})));
          Burkhoff.Parts.AtrialElastance RAElastance(
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Beta(displayUnit="mmHg") = 39.9967162245,
            Alpha=40000,
            Ees=26664477.483)
            annotation (Placement(transformation(extent={{-56,-18},{-32,2}})));
          Burkhoff.Parts.VentricularElastance RVElastance(
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            Beta(displayUnit="mmHg") = 45.3296117211,
            Alpha=24000,
            Ees=50662507.2177)
            annotation (Placement(transformation(extent={{14,-14},{36,6}})));
          Burkhoff.Parts.AtrialElastance LAElastance(
            Tmax(displayUnit="ms") = 0.125,
            Tau(displayUnit="ms") = 0.02,
            Beta(displayUnit="mmHg") = 39.9967162245,
            Alpha=40000,
            Ees=33330596.85375) annotation (Placement(transformation(
                extent={{-9,-8},{9,8}},
                rotation=0,
                origin={167,32})));
          Burkhoff.Parts.VentricularElastance LVElastance(
            Tmax(displayUnit="ms") = 0.2,
            Tau(displayUnit="ms") = 0.03,
            AVDelay(displayUnit="s"),
            Beta(displayUnit="mmHg") = 45.3296117211,
            Alpha=24000,
            Ees=205316476.6191)
            annotation (Placement(transformation(extent={{88,16},{112,36}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k=
                1.3333333333333)                                                      annotation(Placement(transformation(extent={{-86,34},
                    {-78,42}})));
          Modelica.Blocks.Math.Gain RAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-5,-5},{5,5}},
                rotation=180,
                origin={-13,-55})));
          Modelica.Blocks.Math.Add3 add
                                       annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=180,
                origin={-30,-32})));
          Modelica.Blocks.Math.Gain LAVGain(k=0.02) annotation (Placement(
                transformation(
                extent={{-5,-5},{5,5}},
                rotation=0,
                origin={139,-19})));
          Modelica.Blocks.Math.Add3 add1
                                        annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=270,
                origin={176,14})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure
            annotation (Placement(transformation(extent={{100,-22},{112,-12}})));
          Physiolibrary.Hydraulic.Sensors.PressureMeasure pressureMeasure1
            annotation (Placement(transformation(
                extent={{7,-5},{-7,5}},
                rotation=0,
                origin={19,-53})));
          Modelica.Blocks.Math.Add add2 annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={35,-25})));
          Modelica.Blocks.Math.Add add3 annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={109,11})));
          Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=0)
            annotation (Placement(transformation(
                extent={{-4,-4},{4,4}},
                rotation=0,
                origin={50,-4})));
          AvolioTree avolioTree
            annotation (Placement(transformation(extent={{22,-6},{-38,58}})));
          Hydraulic.Components.Resistor                     Ras(Resistance=
                99991790.56125)
            annotation (Placement(transformation(extent={{-38,12},{-58,32}})));
        equation
          connect(AOV.q_in, LV.q_in) annotation(Line(points={{90,-4},{102,-4}},    color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(LV.q_in, MV.q_out) annotation(Line(points={{102,-4},{112,-4}},                                            color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(TV.q_out, RV.q_in) annotation(Line(points = {{14, -40}, {26, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(RV.q_in, PV.q_in) annotation(Line(points = {{26, -40}, {40, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(PV.q_out, Rcsp.q_in) annotation(Line(points = {{60, -40}, {70, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rcsp.q_out, Capprox.q_in) annotation(Line(points = {{90, -40}, {98, -40}, {98, -38}, {108, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Capprox.q_in, Rcp.q_in) annotation(Line(points = {{108, -38}, {122, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rcp.q_out, Cap.q_in) annotation(Line(points = {{142, -38}, {154, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Cap.q_in, Rap.q_in) annotation(Line(points = {{154, -38}, {164, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Rap.q_out, Cvp.q_in) annotation(Line(points = {{184, -38}, {194, -38}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(heartRate.y, RAElastance.HR) annotation (Line(
              points={{-77,38},{-74,38},{-74,6},{-66,6},{-66,0.3},{-54.68,0.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RVElastance.HR, RAElastance.HR) annotation (Line(
              points={{15.21,4.3},{-2,4.3},{-2,6},{-58,6},{-58,0.3},{-54.68,0.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LAElastance.HR, heartRate.y) annotation (Line(
              points={{158.99,38.64},{128,38.64},{128,38},{-77,38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LVElastance.HR, heartRate.y) annotation (Line(
              points={{89.32,34.3},{62,34.3},{62,38},{-77,38}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.StressedVolume, RAElastance.Vs) annotation (Line(
              points={{-54.4,-29.8},{-54.4,-19.9},{-54.32,-19.9},{-54.32,-16.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.StressedVolume, LVElastance.Vs) annotation (Line(
              points={{97.6,6.2},{97.6,16},{89.68,16},{89.68,17.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LA.StressedVolume, LAElastance.Vs) annotation (Line(
              points={{163.6,6.2},{159.26,6.2},{159.26,24.96}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RA.q_in, TV.q_in) annotation(Line(points = {{-50, -40}, {-6, -40}}, color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(LA.q_in, MV.q_in) annotation(Line(points={{168,-4},{132,-4}},                                                                  color = {0, 0, 0}, thickness = 1, smooth = Smooth.None));
          connect(Cvp.q_in, Rvp.q_in) annotation (Line(
              points={{194,-38},{206,-38},{206,8}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rvp.q_out, LA.q_in) annotation (Line(
              points={{186,8},{186,-4},{168,-4}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Cvs.q_in, Rvs.q_in) annotation (Line(
              points={{-70,22},{-84,22},{-84,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(Rvs.q_out, RA.q_in) annotation (Line(
              points={{-64,-40},{-50,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RAVGain.y, add.u1) annotation (Line(
              points={{-18.5,-55},{-18.5,-35.2},{-25.2,-35.2}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LVElastance.Ct, LV.compliance) annotation (Line(
              points={{103.6,17.4},{103.6,17.21},{102,17.21},{102,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LAElastance.Ct, LA.compliance) annotation (Line(
              points={{169.7,25.12},{169.7,18},{168,18},{168,4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RVElastance.Ct, RV.compliance) annotation (Line(
              points={{28.3,-12.6},{28.3,-25.79},{26,-25.79},{26,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RAElastance.Ct, RA.compliance) annotation (Line(
              points={{-40.4,-16.6},{-40.4,-26},{-50,-26},{-50,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.StressedVolume, RVElastance.Vs) annotation (Line(
              points={{21.6,-29.8},{21.6,-24.9},{15.54,-24.9},{15.54,-12.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(LV.q_in, pressureMeasure.q_in) annotation (Line(
              points={{102,-4},{103.6,-4},{103.6,-20}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure1.q_in, RV.q_in) annotation (Line(
              points={{21.8,-56},{24,-56},{24,-40},{26,-40}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pressureMeasure1.pressure, RAVGain.u) annotation (Line(
              points={{14.8,-55},{-7,-55}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add1.u3, add1.u3) annotation (Line(
              points={{172.8,18.8},{172.8,18.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RVElastance.Pt, add2.u2) annotation (Line(
              points={{34.02,-12.6},{34.02,-18.9},{33.2,-18.9},{33.2,-21.4}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RV.externalPressure, add2.y) annotation (Line(
              points={{34,-32},{34,-28.3},{35,-28.3}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(add.y, RA.externalPressure) annotation (Line(
              points={{-34.4,-32},{-42,-32}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RAElastance.Pt, add.u3) annotation (Line(
              points={{-34.16,-16.6},{-34.16,-26},{-20,-26},{-20,-28.8},{-25.2,
                  -28.8}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(LV.externalPressure, add3.y) annotation (Line(
              points={{110,4},{110,7.7},{109,7.7}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(LA.externalPressure, add1.y) annotation (Line(
              points={{176,4},{176,9.6}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(pressureMeasure.pressure, LAVGain.u) annotation (Line(
              points={{109.6,-19},{120.8,-19},{120.8,-19},{133,-19}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(LAVGain.y, add1.u1) annotation (Line(
              points={{144.5,-19},{184,-19},{184,18.8},{179.2,18.8}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(IntraThoracicPressure.y, add3.u2) annotation (Line(
              points={{55,-4},{66,-4},{66,14.6},{107.2,14.6}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(LVElastance.Pt, add3.u1) annotation (Line(
              points={{109.84,17.4},{109.84,16.7},{110.8,16.7},{110.8,14.6}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(add1.u2, LAElastance.Pt) annotation (Line(
              points={{176,18.8},{176,25.12},{174.38,25.12}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(IntraThoracicPressure.y, add1.u3) annotation (Line(
              points={{55,-4},{66,-4},{66,24},{172,24},{172.8,24},{172.8,22},{
                  172.8,18.8}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(IntraThoracicPressure.y, Capprox.externalPressure) annotation (
              Line(
              points={{55,-4},{66,-4},{66,-26},{116,-26},{116,-30}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(Cap.externalPressure, Capprox.externalPressure) annotation (
              Line(
              points={{162,-30},{162,-26},{116,-26},{116,-30}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(Cvp.externalPressure, Capprox.externalPressure) annotation (
              Line(
              points={{202,-30},{202,-26},{116,-26},{116,-30}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(IntraThoracicPressure.y, add2.u1) annotation (Line(
              points={{55,-4},{66,-4},{66,-21.4},{36.8,-21.4}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(add.u2, Capprox.externalPressure) annotation (Line(
              points={{-25.2,-32},{-16,-32},{-16,-18},{66,-18},{66,-26},{116,-26},
                  {116,-30}},
              color={0,190,190},
              smooth=Smooth.None));
          connect(Cvs.q_in, Ras.q_out) annotation (Line(
              points={{-70,22},{-64,22},{-58,22}},
              color={0,0,0},
              thickness=1));
          connect(avolioTree.port_b, Ras.q_in) annotation (Line(
              points={{-38,28},{-38,22}},
              color={0,0,0},
              thickness=1));
          connect(AOV.q_out, avolioTree.port_a) annotation (Line(
              points={{70,-4},{62,-4},{62,28},{22,28}},
              color={0,0,0},
              thickness=1));
          annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                    -100},{220,100}})),                                                                                     Icon(coordinateSystem(extent = {{-100, -100}, {220, 100}})));
        end HemodynamicsBurkhoff_AvolioTree;

        model PulsatileCirculation2
          "Model of cardiovascular system with pulsatile dynamic"
                                  extends Physiolibrary.Icons.CardioVascular;
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryVeins(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              7.425609600872e-08)                                      annotation(Placement(transformation(origin = {-220, 60}, extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryVeinsInertia(
              volumeFlow_start(displayUnit="m3/s") = 2.225e-05, I(displayUnit=
                  "Pa.s2/m3") = 410632.9532382)                            annotation(Placement(transformation(origin={-278,60},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RPulmonaryArtery(
              useConductanceInput=false, Conductance(displayUnit="m3/(Pa.s)")=
              2.2216823876548e-07)                                      annotation(Placement(transformation(origin={200,58},    extent = {{17.5, -17.5}, {-17.5, 17.5}})));
          Physiolibrary.Hydraulic.Components.Inertia pulmonaryArterialInertia(
              volumeFlow_start(displayUnit="ml/min") = 7.3233333333333e-07, I(
                displayUnit="mmHg.s2/ml") = 99991.79056125)                   annotation(Placement(transformation(origin={158,58},    extent = {{15, -15}, {-15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryVeins(
            useComplianceInput=false,
            volume_start(displayUnit="ml") = 0.0006597,
            ZeroPressureVolume=0.0001,
            Compliance(displayUnit="ml/mmHg") = 3.5027875591992e-07)      annotation(Placement(transformation(origin={-279,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve mitralValve(
                                      useLimitationInputs=false, _Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06)              annotation(Placement(transformation(origin={-243,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel leftVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.0002097,
            ZeroPressureVolume=9e-05)                                    annotation(Placement(transformation(origin={-209,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RLeftMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 9.3757696980707e-08)
                                                                annotation(Placement(transformation(origin={-181,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve aorticValve(_Gon(displayUnit="ml/(mmHg.s)")=
                 1.9996641612045e-06, useLimitationInputs=false)    annotation(Placement(transformation(origin={-143,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RSystemic(useConductanceInput=false,
              Conductance(displayUnit="ml/(mmHg.s)") = 7.5006157584566e-09)
                                                                 annotation(Placement(transformation(origin={31,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve tricuspidValve(
              useLimitationInputs=false, _Gon(displayUnit="ml/(mmHg.s)") = 1.9996641612045e-06)
                                                                       annotation(Placement(transformation(origin={137,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel rightVentricle(
              useComplianceInput=true,
            useExternalPressureInput=true,
            volume_start=0.00018,
            ZeroPressureVolume=7e-05)                                     annotation(Placement(transformation(origin={171,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.Conductor RRightMyo(useConductanceInput=false,
              Conductance(displayUnit="m3/(Pa.s)") = 4.2858518443821e-07)
                                                                 annotation(Placement(transformation(origin={207,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.IdealValve pulmonaryValve(_Gon(displayUnit=
                 "ml/(mmHg.s)") = 1.9996641612045e-06, useLimitationInputs=false)
                                                                       annotation(Placement(transformation(origin={245,-3},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArtery(
            volume_start=2.1e-05,
            ZeroPressureVolume=2e-05,
            Compliance(displayUnit="m3/Pa") = 6.7505541826109e-10)         annotation(Placement(transformation(origin={243,57},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel pulmonaryArterioles(
            volume_start=0.000637,
            ZeroPressureVolume=0.0006,
            Compliance(displayUnit="ml/mmHg") = 2.0026644075079e-08)           annotation(Placement(transformation(origin={124,58},    extent = {{-15, -15}, {15, 15}})));
          Physiolibrary.Hydraulic.Components.ElasticVessel veins(
            Compliance(displayUnit="ml/mmHg") = 1.5001231516913e-07,
            volume_start(displayUnit="ml") = 0.002743,
            ZeroPressureVolume=0.00237)
            annotation (Placement(transformation(
                origin={107,-3},
                extent={{-15,-15},{15,15}})));
          Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
            timeVaryingElastanceLeft(
            Ed(displayUnit="mmHg/ml") = 13332238.7415,
            Es(displayUnit="mmHg/ml") = 183318282.69563,
            Pi0(displayUnit="mmHg") = 6666.11937075)
            annotation (Placement(transformation(extent={{-222,16},{-202,36}})));
          Physiolibrary.Hydraulic.Examples.Fernandez2013.Parts.TimeVaryingElastance
            timeVaryingElastanceRight(
            Ed(displayUnit="mmHg/ml") = 3999671.62245,
            Es(displayUnit="mmHg/ml") = 43729743.0721,
            Pi0(displayUnit="mmHg") = 3199.73729796)
            annotation (Placement(transformation(extent={{164,18},{184,38}})));
          Physiolibrary.Types.Constants.FrequencyConst heartRate(k(displayUnit=
                  "Hz") = 1.2)
            annotation (Placement(transformation(extent={{-262,30},{-244,42}})));
            //a1(      L=0.04,      R=0.0145,      h=0.00163,      E=4000)
          AvolioTree avolioTree(a42(R=2.8e-05))
            annotation (Placement(transformation(extent={{-92,-38},{-32,26}})));
        equation
          connect(timeVaryingElastanceLeft.C, leftVentricle.compliance)
            annotation (Line(
              points={{-212,17},{-209,17},{-209,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastanceRight.C, rightVentricle.compliance)
            annotation (Line(
              points={{174,19},{174,9},{171,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(veins.q_in, tricuspidValve.q_in) annotation (Line(
              points={{107,-3},{122,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(timeVaryingElastanceLeft.Pi, leftVentricle.externalPressure)
            annotation (Line(
              points={{-205,17},{-205,16.5},{-197,16.5},{-197,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(timeVaryingElastanceRight.Pi, rightVentricle.externalPressure)
            annotation (Line(
              points={{181,19},{181,9},{183,9}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastanceLeft.HR) annotation (Line(
              points={{-241.75,36},{-232.375,36},{-232.375,33.6},{-220.6,33.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(rightVentricle.q_in, tricuspidValve.q_out) annotation (Line(
              points={{171,-3},{152,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RRightMyo.q_in, rightVentricle.q_in) annotation (Line(
              points={{192,-3},{171,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(heartRate.y, timeVaryingElastanceRight.HR) annotation (Line(
              points={{-241.75,36},{-34,36},{-34,35.6},{165.4,35.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(RRightMyo.q_out, pulmonaryValve.q_in) annotation (Line(
              points={{222,-3},{230,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryValve.q_out, pulmonaryArtery.q_in) annotation (Line(
              points={{260,-3},{266,-3},{266,57},{243,57}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArtery.q_in, RPulmonaryArtery.q_in) annotation (Line(
              points={{243,57},{243,58},{217.5,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryArtery.q_out, pulmonaryArterialInertia.q_in)
            annotation (Line(
              points={{182.5,58},{173,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterialInertia.q_out, pulmonaryArterioles.q_in)
            annotation (Line(
              points={{143,58},{124,58}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryArterioles.q_in, RPulmonaryVeins.q_in) annotation (
              Line(
              points={{124,58},{-42,58},{-42,60},{-205,60}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RPulmonaryVeins.q_out, pulmonaryVeinsInertia.q_in) annotation (
              Line(
              points={{-235,60},{-263,60}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeinsInertia.q_out, pulmonaryVeins.q_in) annotation (
              Line(
              points={{-293,60},{-296,60},{-296,-3},{-279,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(pulmonaryVeins.q_in, mitralValve.q_in) annotation (Line(
              points={{-279,-3},{-258,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(mitralValve.q_out, leftVentricle.q_in) annotation (Line(
              points={{-228,-3},{-209,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(leftVentricle.q_in, RLeftMyo.q_in) annotation (Line(
              points={{-209,-3},{-196,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RLeftMyo.q_out, aorticValve.q_in) annotation (Line(
              points={{-166,-3},{-158,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(aorticValve.q_out, avolioTree.port_a) annotation (Line(
              points={{-128,-3},{-108,-3},{-108,-4},{-92,-4}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(avolioTree.port_b, RSystemic.q_in) annotation (Line(
              points={{-32,-4},{-8,-4},{-8,-3},{16,-3}},
              color={0,0,0},
              thickness=1,
              smooth=Smooth.None));
          connect(RSystemic.q_out, veins.q_in) annotation (Line(
              points={{46,-3},{76,-3},{107,-3}},
              color={0,0,0},
              thickness=1));
          annotation(Diagram(coordinateSystem(extent={{-350,-100},{400,100}},      preserveAspectRatio=false,  grid = {2, 2})),
                                                                                                    Icon(coordinateSystem(extent={{-350,
                    -100},{400,100}},                                                                                                    preserveAspectRatio = true, grid = {2, 2})),
            Documentation(info="<html>
<p>Model of cardiovascular system with pulsatile dynamics</p>
<ul>
<li>Javier Fernandez de Canete, P del Saz-Orozco, D Moreno-Boza, E Duran-Venegas (2013), <a href=\"http://www.mendeley.com/library/#\">Object-oriented modeling and simulation of the closed loop cardiovascular systemby using SIMSCAPE.</a> <i>Computers in biology and medicine</i> 43 (4) p. 323-33</li>
<li>Kulh&aacute;nek T, Tribula M, Kofr&aacute;nek J, Matej&aacute;k M. Simple models of the cardiovascular system for educational and research purposes<i>. MEFANET Journal 2014</i>. Available at WWW: http://mj.mefanet.cz/mj-04140914.</li>
</ul>
</html>",         revisions="<html>
<ul>
<li><i>Sep 2014 </i>by Tomas Kulhanek: <br>Created. </li>
</ul>
</html>"),  experiment(
              StopTime=15,
              __Dymola_NumberOfIntervals=5000,
              Tolerance=1e-06),
            __Dymola_experimentSetupOutput);
        end PulsatileCirculation2;
      end Test;

      model AvolioTree
        extends ArterialTree(
        a1( L=0.04,
            R=0.0145,
            h=0.00163,
            E=400000),
      a2(L=0.02,R=0.0112,h=0.00132,E=400000.0),
      a5(L=0.039,R=0.0107,h=0.00127,E=400000.0),
      a11(L=0.052,R=0.01,h=0.0012,E=400000.0),
      a21(L=0.052,R=0.0095,h=0.00116,E=400000.0),
      a34(L=0.052,R=0.0095,h=0.00116,E=400000.0),
      a50(L=0.053,R=0.0087,h=0.00108,E=400000.0),
      a65(L=0.053,R=0.0057,h=0.0008,E=400000.0),
      a75(L=0.053,R=0.0057,h=0.0008,E=400000.0),
      a49(L=0.01,R=0.0039,h=0.00064,E=400000.0),
      a61(L=0.071,R=0.0018,h=0.00045,E=400000.0),
      a62(L=0.063,R=0.0028,h=0.00054,E=400000.0),
      a63(L=0.066,R=0.0022,h=0.00049,E=400000.0),
      a64(L=0.032,R=0.0026,h=0.00053,E=400000.0),
      a66(L=0.059,R=0.0043,h=0.00069,E=400000.0),
      a67(L=0.032,R=0.0026,h=0.00053,E=400000.0),
      a83(L=0.05,R=0.0016,h=0.00043,E=400000.0),
      a4(L=0.089,R=0.0037,h=0.00063,E=400000.0),
      a10(L=0.089,R=0.0037,h=0.00063,E=400000.0),
      a20(L=0.031,R=0.0037,h=0.00063,E=400000.0),
      a12(L=0.089,R=0.0037,h=0.00063,E=400000.0),
      a22(L=0.089,R=0.0037,h=0.00063,E=400000.0),
      a3(L=0.034,R=0.0042,h=0.00067,E=400000.0),
      a6(   L=0.034,
            R=0.0062,
            h=0.00086,
            E=400000),
      a82(L=0.058,R=0.0052,h=0.00076,E=400000.0),
      a84(L=0.058,R=0.0052,h=0.00076,E=400000.0),
      a89(L=0.083,R=0.0029,h=0.00055,E=400000.0),
      a92(L=0.083,R=0.0029,h=0.00055,E=400000.0),
      a90(L=0.05,R=0.002,h=0.0004,E=1600000.0),
      a91(L=0.05,R=0.002,h=0.0004,E=1600000.0),
      a98(L=0.061,R=0.0027,h=0.00053,E=400000.0),
      a99(L=0.061,R=0.0027,h=0.00053,E=400000.0),
      a104(L=0.127,R=0.0024,h=0.0005,E=800000.0),
      a107(L=0.127,R=0.0024,h=0.0005,E=800000.0),
      a105(L=0.126,R=0.0023,h=0.00049,E=1600000.0),
      a106(L=0.126,R=0.0023,h=0.00049,E=1600000.0),
      a109(L=0.127,R=0.0024,h=0.0005,E=800000.0),
      a110(L=0.127,R=0.0024,h=0.0005,E=800000.0),
      a111(L=0.094,R=0.002,h=0.00047,E=800000.0),
      a112(L=0.094,R=0.002,h=0.00047,E=800000.0),
      a113(L=0.094,R=0.002,h=0.0005,E=400000.0),
      a114(L=0.094,R=0.002,h=0.0005,E=400000.0),
      a115(L=0.025,R=0.0013,h=0.00039,E=1600000.0),
      a118(L=0.025,R=0.0013,h=0.00039,E=1600000.0),
      a119(L=0.15,R=0.001,h=0.0002,E=1600000.0),
      a124(L=0.15,R=0.001,h=0.0002,E=1600000.0),
      a125(L=0.15,R=0.001,h=0.0002,E=1600000.0),
      a128(L=0.15,R=0.001,h=0.0002,E=1600000.0),
      a116(L=0.161,R=0.0018,h=0.00045,E=1600000.0),
      a117(L=0.161,R=0.0018,h=0.00045,E=1600000.0),
      a121(L=0.161,R=0.0018,h=0.00045,E=1600000.0),
      a122(L=0.161,R=0.0018,h=0.00045,E=1600000.0),
      a120(L=0.159,R=0.0013,h=0.00039,E=1600000.0),
      a123(L=0.159,R=0.0013,h=0.00039,E=1600000.0),
      a126(L=0.159,R=0.0013,h=0.00019,E=1600000.0),
      a127(L=0.159,R=0.0013,h=0.00019,E=1600000.0),
      a31(L=0.059,R=0.0018,h=0.00045,E=800000.0),
      a37(L=0.059,R=0.0018,h=0.00045,E=800000.0),
      a32(L=0.118,R=0.0015,h=0.00042,E=800000.0),
      a36(L=0.118,R=0.0015,h=0.00042,E=800000.0),
      a33(L=0.04,R=0.0007,h=0.0002,E=800000.0),
      a35(L=0.04,R=0.0007,h=0.0002,E=800000.0),
      a43(L=0.03,R=0.001,h=0.0003,E=800000.0),
      a56(L=0.03,R=0.001,h=0.0003,E=800000.0),
      a44(L=0.059,R=0.0013,h=0.00039,E=800000.0),
      a55(L=0.059,R=0.0013,h=0.00039,E=800000.0),
      a45(L=0.04,R=0.001,h=0.0003,E=1600000.0),
      a54(L=0.04,R=0.001,h=0.0003,E=1600000.0),
      a46(L=0.03,R=0.0006,h=0.0002,E=1600000.0),
      a53(L=0.03,R=0.0006,h=0.0002,E=1600000.0),
      a47(L=0.059,R=0.0008,h=0.00026,E=1600000.0),
      a52(L=0.059,R=0.0008,h=0.00026,E=1600000.0),
      a48(L=0.03,R=0.0007,h=0.0002,E=1600000.0),
      a51(L=0.03,R=0.0007,h=0.0002,E=1600000.0),
      a60(L=0.059,R=0.0008,h=0.00026,E=1600000.0),
      a68(L=0.059,R=0.0008,h=0.00026,E=1600000.0),
      a73(L=0.04,R=0.0006,h=0.0002,E=1600000.0),
      a77(L=0.04,R=0.0006,h=0.0002,E=1600000.0),
      a74(L=0.05,R=0.0007,h=0.0002,E=1600000.0),
      a76(L=0.05,R=0.0007,h=0.0002,E=1600000.0),
      a7(L=0.15,R=0.001,h=0.0003,E=800000.0),
      a15(L=0.15,R=0.001,h=0.0003,E=800000.0),
      a8(L=0.068,R=0.004,h=0.00066,E=400000.0),
      a14(L=0.068,R=0.004,h=0.00066,E=400000.0),
      a9(L=0.148,R=0.0019,h=0.00045,E=800000.0),
      a13(L=0.148,R=0.0019,h=0.00045,E=800000.0),
      a16(L=0.05,R=0.001,h=0.0003,E=800000.0),
      a26(L=0.05,R=0.001,h=0.0003,E=800000.0),
      a17(L=0.061,R=0.0036,h=0.00062,E=400000.0),
      a25(L=0.061,R=0.0036,h=0.00062,E=400000.0),
      a18(L=0.1,R=0.002,h=0.00052,E=800000.0),
      a24(L=0.1,R=0.002,h=0.00052,E=800000.0),
      a19(L=0.05,R=0.001,h=0.0003,E=800000.0),
      a23(L=0.05,R=0.001,h=0.0003,E=800000.0),
      a27(L=0.03,R=0.0015,h=0.00035,E=1600000.0),
      a41(L=0.03,R=0.0015,h=0.00035,E=1600000.0),
      a28(L=0.056,R=0.0031,h=0.00057,E=400000.0),
      a40(L=0.056,R=0.0031,h=0.00057,E=400000.0),
      a29(L=0.05,R=0.001,h=0.0003,E=1600000.0),
      a39(L=0.05,R=0.001,h=0.0003,E=1600000.0),
      a30(L=0.08,R=0.0015,h=0.00035,E=1600000.0),
      a38(L=0.08,R=0.0015,h=0.00035,E=1600000.0),
      a42(L=0.63,R=0.0028,h=0.00055,E=400000.0),
      a57(L=0.63,R=0.0028,h=0.00055,E=400000.0),
      a58(L=0.15,R=0.0015,h=0.00035,E=800000.0),
      a70(L=0.15,R=0.0015,h=0.00035,E=800000.0),
      a59(L=0.063,R=0.0026,h=0.00053,E=400000.0),
      a69(L=0.063,R=0.0026,h=0.00053,E=400000.0),
      a71(L=0.063,R=0.0025,h=0.00052,E=400000.0),
      a79(L=0.063,R=0.0025,h=0.00052,E=400000.0),
      a72(L=0.05,R=0.0007,h=0.0002,E=1600000.0),
      a78(L=0.05,R=0.0007,h=0.0002,E=1600000.0),
      a80(L=0.05,R=0.0006,h=0.0002,E=1600000.0),
      a86(L=0.05,R=0.0006,h=0.0002,E=1600000.0),
      a81(L=0.046,R=0.0024,h=0.0005,E=400000.0),
      a85(L=0.046,R=0.0024,h=0.0005,E=400000.0),
      a87(L=0.067,R=0.0021,h=0.00049,E=800000.0),
      a94(L=0.067,R=0.0021,h=0.00049,E=800000.0),
      a88(L=0.117,R=0.0016,h=0.00043,E=800000.0),
      a93(L=0.117,R=0.0016,h=0.00043,E=800000.0),
      a95(L=0.085,R=0.0019,h=0.00462,E=800000.0),
      a102(L=0.085,R=0.0019,h=0.00462,E=800000.0),
      a96(L=0.079,R=0.0009,h=0.00028,E=1600000.0),
      a101(L=0.079,R=0.0009,h=0.00028,E=1600000.0),
      a97(L=0.117,R=0.0016,h=0.00043,E=800000.0),
      a100(L=0.117,R=0.0016,h=0.00043,E=800000.0),
      a103(L=0.085,R=0.0019,h=0.00046,E=800000.0),
      a108(L=0.085,R=0.0019,h=0.00046,E=800000.0));
      end AvolioTree;
end Avolio1980;
